//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |           Copyright (c) 2017 Hex-Rays, <support@hex-rays.com>           |
// |                      License info: 48-3FBD-7F04-2C                      |
// |                      Jiang Ying, Personal license                       |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  ApplyStrucTInfos();   // structure type infos
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("metapc", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 6);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLAG, SW_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 16);
	set_inf_attr(INF_COMMENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
	add_default_til("gnulnx_x64");
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	set_selector(0X1,0);
	set_selector(0X2,0);
	set_selector(0X3,0);
	set_selector(0X4,0);
	set_selector(0X5,0);
	set_selector(0X6,0);
	set_selector(0X7,0);
	set_selector(0X8,0);
	set_selector(0X9,0);
	set_selector(0XA,0);
	set_selector(0XB,0);
	set_selector(0XC,0);
	set_selector(0XD,0);
	set_selector(0XE,0);
	set_selector(0XF,0);
	set_selector(0X10,0);
	set_selector(0X11,0);
	set_selector(0X12,0);
	set_selector(0X13,0);
	set_selector(0X14,0);
	;
	add_segm_ex(0,0XA18,0X1,2,1,2,ADDSEG_NOSREG);
	SegRename(0,"LOAD");
	SegClass (0,"CODE");
	SegDefReg(0x0,"es",0x0);
	SegDefReg(0x0,"ss",0x0);
	SegDefReg(0x0,"ds",0x11);
	SegDefReg(0x0,"fs",0x0);
	SegDefReg(0x0,"gs",0x0);
	set_segm_type(0,2);
	add_segm_ex(0XA18,0XA32,0X4,2,5,2,ADDSEG_NOSREG);
	SegRename(0XA18,".init");
	SegClass (0XA18,"CODE");
	SegDefReg(0xA18,"ds",0x11);
	set_segm_type(0XA18,2);
	add_segm_ex(0XA32,0XA40,0X1,2,1,2,ADDSEG_NOSREG);
	SegRename(0XA32,"LOAD");
	SegClass (0XA32,"CODE");
	SegDefReg(0xA32,"es",0x0);
	SegDefReg(0xA32,"ss",0x0);
	SegDefReg(0xA32,"ds",0x11);
	SegDefReg(0xA32,"fs",0x0);
	SegDefReg(0xA32,"gs",0x0);
	set_segm_type(0XA32,2);
	add_segm_ex(0XA40,0XB80,0X5,2,3,2,ADDSEG_NOSREG);
	SegRename(0XA40,".plt");
	SegClass (0XA40,"CODE");
	SegDefReg(0xA40,"ds",0x11);
	set_segm_type(0XA40,2);
	add_segm_ex(0XB80,0XB90,0X6,2,10,2,ADDSEG_NOSREG);
	SegRename(0XB80,".plt.got");
	SegClass (0XB80,"CODE");
	SegDefReg(0xB80,"ds",0x11);
	set_segm_type(0XB80,2);
	add_segm_ex(0XB90,0X1952,0X7,2,3,2,ADDSEG_NOSREG);
	SegRename(0XB90,".text");
	SegClass (0XB90,"CODE");
	SegDefReg(0xB90,"ds",0x11);
	set_segm_type(0XB90,2);
	add_segm_ex(0X1952,0X1954,0X1,2,1,2,ADDSEG_NOSREG);
	SegRename(0X1952,"LOAD");
	SegClass (0X1952,"CODE");
	SegDefReg(0x1952,"es",0x0);
	SegDefReg(0x1952,"ss",0x0);
	SegDefReg(0x1952,"ds",0x11);
	SegDefReg(0x1952,"fs",0x0);
	SegDefReg(0x1952,"gs",0x0);
	set_segm_type(0X1952,2);
	add_segm_ex(0X1954,0X195D,0X8,2,5,2,ADDSEG_NOSREG);
	SegRename(0X1954,".fini");
	SegClass (0X1954,"CODE");
	SegDefReg(0x1954,"ds",0x11);
	set_segm_type(0X1954,2);
	add_segm_ex(0X195D,0X1960,0X1,2,1,2,ADDSEG_NOSREG);
	SegRename(0X195D,"LOAD");
	SegClass (0X195D,"CODE");
	SegDefReg(0x195D,"es",0x0);
	SegDefReg(0x195D,"ss",0x0);
	SegDefReg(0x195D,"ds",0x11);
	SegDefReg(0x195D,"fs",0x0);
	SegDefReg(0x195D,"gs",0x0);
	set_segm_type(0X195D,2);
	add_segm_ex(0X1960,0X23BA,0X9,2,10,2,ADDSEG_NOSREG);
	SegRename(0X1960,".rodata");
	SegClass (0X1960,"CONST");
	SegDefReg(0x1960,"ds",0x11);
	set_segm_type(0X1960,3);
	add_segm_ex(0X23BA,0X23BC,0X1,2,1,2,ADDSEG_NOSREG);
	SegRename(0X23BA,"LOAD");
	SegClass (0X23BA,"CODE");
	SegDefReg(0x23BA,"es",0x0);
	SegDefReg(0x23BA,"ss",0x0);
	SegDefReg(0x23BA,"ds",0x11);
	SegDefReg(0x23BA,"fs",0x0);
	SegDefReg(0x23BA,"gs",0x0);
	set_segm_type(0X23BA,2);
	add_segm_ex(0X23BC,0X2450,0XA,2,5,2,ADDSEG_NOSREG);
	SegRename(0X23BC,".eh_frame_hdr");
	SegClass (0X23BC,"CONST");
	SegDefReg(0x23BC,"ds",0x11);
	set_segm_type(0X23BC,3);
	add_segm_ex(0X2450,0X26C4,0XB,2,10,2,ADDSEG_NOSREG);
	SegRename(0X2450,".eh_frame");
	SegClass (0X2450,"CONST");
	SegDefReg(0x2450,"ds",0x11);
	set_segm_type(0X2450,3);
	add_segm_ex(0X202DD0,0X202DD8,0XC,2,10,2,ADDSEG_NOSREG);
	SegRename(0X202DD0,".init_array");
	SegClass (0X202DD0,"DATA");
	SegDefReg(0x202DD0,"ds",0x11);
	set_segm_type(0X202DD0,3);
	add_segm_ex(0X202DD8,0X202DE0,0XD,2,10,2,ADDSEG_NOSREG);
	SegRename(0X202DD8,".fini_array");
	SegClass (0X202DD8,"DATA");
	SegDefReg(0x202DD8,"ds",0x11);
	set_segm_type(0X202DD8,3);
	add_segm_ex(0X202DE0,0X202DE8,0XE,2,10,2,ADDSEG_NOSREG);
	SegRename(0X202DE0,".jcr");
	SegClass (0X202DE0,"DATA");
	SegDefReg(0x202DE0,"ds",0x11);
	set_segm_type(0X202DE0,3);
	add_segm_ex(0X202DE8,0X202FC8,0X2,2,1,2,ADDSEG_NOSREG);
	SegRename(0X202DE8,"LOAD");
	SegClass (0X202DE8,"DATA");
	SegDefReg(0x202DE8,"es",0x0);
	SegDefReg(0x202DE8,"ss",0x0);
	SegDefReg(0x202DE8,"ds",0x11);
	SegDefReg(0x202DE8,"fs",0x0);
	SegDefReg(0x202DE8,"gs",0x0);
	set_segm_type(0X202DE8,3);
	add_segm_ex(0X202FC8,0X203000,0XF,2,10,2,ADDSEG_NOSREG);
	SegRename(0X202FC8,".got");
	SegClass (0X202FC8,"DATA");
	SegDefReg(0x202FC8,"ds",0x11);
	set_segm_type(0X202FC8,3);
	add_segm_ex(0X203000,0X2030B0,0X10,2,10,2,ADDSEG_NOSREG);
	SegRename(0X203000,".got.plt");
	SegClass (0X203000,"DATA");
	SegDefReg(0x203000,"ds",0x11);
	set_segm_type(0X203000,3);
	add_segm_ex(0X2030B0,0X2030C0,0X2,2,1,2,ADDSEG_NOSREG);
	SegRename(0X2030B0,"LOAD");
	SegClass (0X2030B0,"DATA");
	SegDefReg(0x2030B0,"es",0x0);
	SegDefReg(0x2030B0,"ss",0x0);
	SegDefReg(0x2030B0,"ds",0x11);
	SegDefReg(0x2030B0,"fs",0x0);
	SegDefReg(0x2030B0,"gs",0x0);
	set_segm_type(0X2030B0,3);
	add_segm_ex(0X2030C0,0X203154,0X11,2,8,2,ADDSEG_NOSREG);
	SegRename(0X2030C0,".data");
	SegClass (0X2030C0,"DATA");
	SegDefReg(0x2030C0,"ds",0x11);
	set_segm_type(0X2030C0,3);
	add_segm_ex(0X203154,0X203160,0X2,2,1,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X203154,"LOAD");
	SegClass (0X203154,"DATA");
	SegDefReg(0x203154,"es",0x0);
	SegDefReg(0x203154,"ss",0x0);
	SegDefReg(0x203154,"ds",0x11);
	SegDefReg(0x203154,"fs",0x0);
	SegDefReg(0x203154,"gs",0x0);
	set_segm_type(0X203154,3);
	add_segm_ex(0X203160,0X203280,0X12,2,8,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X203160,".bss");
	SegClass (0X203160,"BSS");
	SegDefReg(0x203160,"ds",0x11);
	set_segm_type(0X203160,9);
	add_segm_ex(0X203280,0X203281,0X13,2,1,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X203280,".prgend");
	SegClass (0X203280,".prgend");
	set_segm_type(0X203280,7);
	add_segm_ex(0X203288,0X203358,0X14,2,10,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X203288,"extern");
	SegClass (0X203288,"extern");
	set_segm_type(0X203288,1);
	set_inf_attr(INF_LOW_OFF, 0x20);
	set_inf_attr(INF_HIGH_OFF, 0x203358);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("Elf64_Sym");
	SetType(get_member_id(id, 0x0), "unsigned __int32");
	SetType(get_member_id(id, 0x4), "unsigned __int8");
	SetType(get_member_id(id, 0x5), "unsigned __int8");
	SetType(get_member_id(id, 0x6), "unsigned __int16");
	SetType(get_member_id(id, 0x8), "unsigned __int64");
	SetType(get_member_id(id, 0x10), "unsigned __int64");
	id = get_struc_id("NODE");
	id = get_struc_id("Elf64_Rela");
	SetType(get_member_id(id, 0x0), "unsigned __int64");
	SetType(get_member_id(id, 0x8), "unsigned __int64");
	SetType(get_member_id(id, 0x10), "__int64");
	id = get_struc_id("Elf64_Dyn");
	SetType(get_member_id(id, 0x0), "unsigned __int64");
	SetType(get_member_id(id, 0x8), "unsigned __int64");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"Elf64_Sym",0);
	id = add_struc(-1,"NODE",0);
	id = add_struc(-1,"Elf64_Rela",0);
	id = add_struc(-1,"Elf64_Dyn",0);
	
	id = get_struc_id("Elf64_Sym");
	mid = add_struc_member(id,"st_name",	0,	0x20500400,	0X5B0,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"st_info",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"st_other",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"st_shndx",	0X6,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"st_value",	0X8,	0x30500400,	0,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"st_size",	0X10,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("NODE");
	mid = add_struc_member(id,"next_node",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"func_ptr",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"flag",	0X10,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("Elf64_Rela");
	mid = add_struc_member(id,"r_offset",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"r_info",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"r_addend",	0X10,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("Elf64_Dyn");
	mid = add_struc_member(id,"d_tag",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"d_un",	0X8,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	set_cmt	(0,	"File format: \\x7FELF",	0);
	update_extra_cmt		(0,	E_PREV + 0,	"; File Name   : C:\\Users\\杨鑫顺\\Desktop\\2019强网杯\\random");
	update_extra_cmt		(0,	E_PREV + 1,	"; Format      : ELF64 for x86-64 (Shared object)");
	update_extra_cmt		(0,	E_PREV + 2,	"; Interpreter '/lib64/ld-linux-x86-64.so.2'");
	update_extra_cmt		(0,	E_PREV + 3,	"; Needed Library 'libc.so.6'");
	update_extra_cmt		(0,	E_PREV + 4,	"; ");
	create_dword	(x=0);
	op_hex		(x,	0);
	set_cmt	(0X4,	"File class: 64-bit",	0);
	create_byte	(x=0X4);
	op_hex		(x,	0);
	set_cmt	(0X5,	"Data encoding: little-endian",	0);
	create_byte	(x=0X5);
	op_hex		(x,	0);
	set_cmt	(0X6,	"File version",	0);
	create_byte	(x=0X6);
	op_hex		(x,	0);
	set_cmt	(0X7,	"OS/ABI: UNIX System V ABI",	0);
	create_byte	(x=0X7);
	op_hex		(x,	0);
	set_cmt	(0X8,	"ABI Version",	0);
	create_byte	(x=0X8);
	op_hex		(x,	0);
	set_cmt	(0X9,	"Padding",	0);
	create_byte	(x=0X9);
	make_array	(x,	0X7);
	op_hex		(x,	0);
	set_cmt	(0X10,	"File type: Shared object",	0);
	create_word	(x=0X10);
	op_hex		(x,	0);
	set_cmt	(0X12,	"Machine: x86-64",	0);
	create_word	(x=0X12);
	op_hex		(x,	0);
	set_cmt	(0X14,	"File version",	0);
	create_dword	(x=0X14);
	op_hex		(x,	0);
	set_cmt	(0X18,	"Entry point",	0);
	create_qword	(x=0X18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X20,	"PHT file offset",	0);
	create_qword	(x=0X20);
	op_hex		(x,	0);
	set_cmt	(0X28,	"SHT file offset",	0);
	create_qword	(x=0X28);
	op_hex		(x,	0);
	set_cmt	(0X30,	"Processor-specific flags",	0);
	create_dword	(x=0X30);
	op_hex		(x,	0);
	set_cmt	(0X34,	"ELF header size",	0);
	create_word	(x=0X34);
	op_hex		(x,	0);
	set_cmt	(0X36,	"PHT entry size",	0);
	create_word	(x=0X36);
	op_hex		(x,	0);
	set_cmt	(0X38,	"Number of entries in PHT",	0);
	create_word	(x=0X38);
	op_hex		(x,	0);
	set_cmt	(0X3A,	"SHT entry size",	0);
	create_word	(x=0X3A);
	op_hex		(x,	0);
	set_cmt	(0X3C,	"Number of entries in SHT",	0);
	create_word	(x=0X3C);
	op_hex		(x,	0);
	set_cmt	(0X3E,	"SHT entry index for string table",	0);
	create_word	(x=0X3E);
	op_hex		(x,	0);
	set_cmt	(0X40,	"Type: PHDR",	0);
	update_extra_cmt		(0X40,	E_PREV + 0,	"; ELF64 Program Header");
	update_extra_cmt		(0X40,	E_PREV + 1,	"; PHT Entry 0");
	create_dword	(x=0X40);
	op_hex		(x,	0);
	set_cmt	(0X44,	"Flags",	0);
	create_dword	(x=0X44);
	op_hex		(x,	0);
	set_cmt	(0X48,	"File offset",	0);
	create_qword	(x=0X48);
	op_hex		(x,	0);
	set_cmt	(0X50,	"Virtual address",	0);
	create_qword	(x=0X50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X58,	"Physical address",	0);
	create_qword	(x=0X58);
	op_hex		(x,	0);
	set_cmt	(0X60,	"Size in file image",	0);
	create_qword	(x=0X60);
	op_hex		(x,	0);
	set_cmt	(0X68,	"Size in memory image",	0);
	create_qword	(x=0X68);
	op_hex		(x,	0);
	set_cmt	(0X70,	"Alignment",	0);
	create_qword	(x=0X70);
	op_hex		(x,	0);
	set_cmt	(0X78,	"Type: INTERP",	0);
	update_extra_cmt		(0X78,	E_PREV + 0,	"; PHT Entry 1");
	create_dword	(x=0X78);
	op_hex		(x,	0);
	set_cmt	(0X7C,	"Flags",	0);
	create_dword	(x=0X7C);
	op_hex		(x,	0);
	set_cmt	(0X80,	"File offset",	0);
	create_qword	(x=0X80);
	op_hex		(x,	0);
	set_cmt	(0X88,	"Virtual address",	0);
	create_qword	(x=0X88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X90,	"Physical address",	0);
	create_qword	(x=0X90);
	op_hex		(x,	0);
	set_cmt	(0X98,	"Size in file image",	0);
	create_qword	(x=0X98);
	op_hex		(x,	0);
	set_cmt	(0XA0,	"Size in memory image",	0);
	create_qword	(x=0XA0);
	op_hex		(x,	0);
	set_cmt	(0XA8,	"Alignment",	0);
	create_qword	(x=0XA8);
	op_hex		(x,	0);
	set_cmt	(0XB0,	"Type: LOAD",	0);
	update_extra_cmt		(0XB0,	E_PREV + 0,	"; PHT Entry 2");
	create_dword	(x=0XB0);
	op_hex		(x,	0);
	set_cmt	(0XB4,	"Flags",	0);
	create_dword	(x=0XB4);
	op_hex		(x,	0);
	set_cmt	(0XB8,	"File offset",	0);
	create_qword	(x=0XB8);
	op_hex		(x,	0);
	set_cmt	(0XC0,	"Virtual address",	0);
	create_qword	(0XC0);
	set_cmt	(0XC8,	"Physical address",	0);
	create_qword	(x=0XC8);
	op_hex		(x,	0);
	set_cmt	(0XD0,	"Size in file image",	0);
	create_qword	(x=0XD0);
	op_hex		(x,	0);
	set_cmt	(0XD8,	"Size in memory image",	0);
	create_qword	(x=0XD8);
	op_hex		(x,	0);
	set_cmt	(0XE0,	"Alignment",	0);
	create_qword	(x=0XE0);
	op_hex		(x,	0);
	set_cmt	(0XE8,	"Type: LOAD",	0);
	update_extra_cmt		(0XE8,	E_PREV + 0,	"; PHT Entry 3");
	create_dword	(x=0XE8);
	op_hex		(x,	0);
	set_cmt	(0XEC,	"Flags",	0);
	create_dword	(x=0XEC);
	op_hex		(x,	0);
	set_cmt	(0XF0,	"File offset",	0);
	create_qword	(x=0XF0);
	op_hex		(x,	0);
	set_cmt	(0XF8,	"Virtual address",	0);
	create_qword	(x=0XF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X100,	"Physical address",	0);
	create_qword	(x=0X100);
	op_hex		(x,	0);
	set_cmt	(0X108,	"Size in file image",	0);
	create_qword	(x=0X108);
	op_hex		(x,	0);
	set_cmt	(0X110,	"Size in memory image",	0);
	create_qword	(x=0X110);
	op_hex		(x,	0);
	set_cmt	(0X118,	"Alignment",	0);
	create_qword	(x=0X118);
	op_hex		(x,	0);
	set_cmt	(0X120,	"Type: DYNAMIC",	0);
	update_extra_cmt		(0X120,	E_PREV + 0,	"; PHT Entry 4");
	create_dword	(x=0X120);
	op_hex		(x,	0);
	set_cmt	(0X124,	"Flags",	0);
	create_dword	(x=0X124);
	op_hex		(x,	0);
	set_cmt	(0X128,	"File offset",	0);
	create_qword	(x=0X128);
	op_hex		(x,	0);
	set_cmt	(0X130,	"Virtual address",	0);
	create_qword	(x=0X130);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X138,	"Physical address",	0);
	create_qword	(x=0X138);
	op_hex		(x,	0);
	set_cmt	(0X140,	"Size in file image",	0);
	create_qword	(x=0X140);
	op_hex		(x,	0);
	set_cmt	(0X148,	"Size in memory image",	0);
	create_qword	(x=0X148);
	op_hex		(x,	0);
	set_cmt	(0X150,	"Alignment",	0);
	create_qword	(x=0X150);
	op_hex		(x,	0);
	set_cmt	(0X158,	"Type: NOTE",	0);
	update_extra_cmt		(0X158,	E_PREV + 0,	"; PHT Entry 5");
	create_dword	(x=0X158);
	op_hex		(x,	0);
	set_cmt	(0X15C,	"Flags",	0);
	create_dword	(x=0X15C);
	op_hex		(x,	0);
	set_cmt	(0X160,	"File offset",	0);
	create_qword	(x=0X160);
	op_hex		(x,	0);
	set_cmt	(0X168,	"Virtual address",	0);
	create_qword	(x=0X168);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X170,	"Physical address",	0);
	create_qword	(x=0X170);
	op_hex		(x,	0);
	set_cmt	(0X178,	"Size in file image",	0);
	create_qword	(x=0X178);
	op_hex		(x,	0);
	set_cmt	(0X180,	"Size in memory image",	0);
	create_qword	(x=0X180);
	op_hex		(x,	0);
	set_cmt	(0X188,	"Alignment",	0);
	create_qword	(x=0X188);
	op_hex		(x,	0);
	set_cmt	(0X190,	"Type: EH_FRAME",	0);
	update_extra_cmt		(0X190,	E_PREV + 0,	"; PHT Entry 6");
	create_dword	(x=0X190);
	op_hex		(x,	0);
	set_cmt	(0X194,	"Flags",	0);
	create_dword	(x=0X194);
	op_hex		(x,	0);
	set_cmt	(0X198,	"File offset",	0);
	create_qword	(x=0X198);
	op_hex		(x,	0);
	set_cmt	(0X1A0,	"Virtual address",	0);
	create_qword	(x=0X1A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X1A8,	"Physical address",	0);
	create_qword	(x=0X1A8);
	op_hex		(x,	0);
	set_cmt	(0X1B0,	"Size in file image",	0);
	create_qword	(x=0X1B0);
	op_hex		(x,	0);
	set_cmt	(0X1B8,	"Size in memory image",	0);
	create_qword	(x=0X1B8);
	op_hex		(x,	0);
	set_cmt	(0X1C0,	"Alignment",	0);
	create_qword	(x=0X1C0);
	op_hex		(x,	0);
	set_cmt	(0X1C8,	"Type: STACK",	0);
	update_extra_cmt		(0X1C8,	E_PREV + 0,	"; PHT Entry 7");
	create_dword	(x=0X1C8);
	op_hex		(x,	0);
	set_cmt	(0X1CC,	"Flags",	0);
	create_dword	(x=0X1CC);
	op_hex		(x,	0);
	set_cmt	(0X1D0,	"File offset",	0);
	create_qword	(x=0X1D0);
	op_hex		(x,	0);
	set_cmt	(0X1D8,	"Virtual address",	0);
	create_qword	(0X1D8);
	set_cmt	(0X1E0,	"Physical address",	0);
	create_qword	(x=0X1E0);
	op_hex		(x,	0);
	set_cmt	(0X1E8,	"Size in file image",	0);
	create_qword	(x=0X1E8);
	op_hex		(x,	0);
	set_cmt	(0X1F0,	"Size in memory image",	0);
	create_qword	(x=0X1F0);
	op_hex		(x,	0);
	set_cmt	(0X1F8,	"Alignment",	0);
	create_qword	(x=0X1F8);
	op_hex		(x,	0);
	set_cmt	(0X200,	"Type: RO-AFTER",	0);
	update_extra_cmt		(0X200,	E_PREV + 0,	"; PHT Entry 8");
	create_dword	(x=0X200);
	op_hex		(x,	0);
	set_cmt	(0X204,	"Flags",	0);
	create_dword	(x=0X204);
	op_hex		(x,	0);
	set_cmt	(0X208,	"File offset",	0);
	create_qword	(x=0X208);
	op_hex		(x,	0);
	set_cmt	(0X210,	"Virtual address",	0);
	create_qword	(x=0X210);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X218,	"Physical address",	0);
	create_qword	(x=0X218);
	op_hex		(x,	0);
	set_cmt	(0X220,	"Size in file image",	0);
	create_qword	(x=0X220);
	op_hex		(x,	0);
	set_cmt	(0X228,	"Size in memory image",	0);
	create_qword	(x=0X228);
	op_hex		(x,	0);
	set_cmt	(0X230,	"Alignment",	0);
	create_qword	(x=0X230);
	op_hex		(x,	0);
	create_strlit	(0X238,	0X254);
	set_name	(0X238,	"aLib64LdLinuxX8");
	create_dword	(0X254);
	create_qword	(0X258);
	make_array	(0X258,	0X8);
	update_extra_cmt		(0X298,	E_PREV + 0,	"; ELF GNU Hash Table");
	create_dword	(x=0X298);
	op_hex		(x,	0);
	set_name	(0X298,	"elf_gnu_hash_nbuckets");
	create_dword	(x=0X29C);
	op_hex		(x,	0);
	set_name	(0X29C,	"elf_gnu_hash_symbias");
	create_dword	(x=0X2A0);
	op_hex		(x,	0);
	set_name	(0X2A0,	"elf_gnu_hash_bitmask_nwords");
	create_dword	(x=0X2A4);
	op_hex		(x,	0);
	set_name	(0X2A4,	"elf_gnu_hash_shift");
	create_qword	(x=0X2A8);
	op_hex		(x,	0);
	set_name	(0X2A8,	"elf_gnu_hash_indexes");
	create_dword	(x=0X2B0);
	make_array	(x,	0X3);
	op_hex		(x,	0);
	set_name	(0X2B0,	"elf_gnu_hash_bucket");
	create_dword	(x=0X2BC);
	make_array	(x,	0X3);
	op_hex		(x,	0);
	set_name	(0X2BC,	"elf_gnu_hash_chain");
	update_extra_cmt		(0X2C8,	E_PREV + 0,	"; ELF Symbol Table");
	MakeStruct	(0X2C8,	"Elf64_Sym");
	MakeStruct	(0X2E0,	"Elf64_Sym");
	MakeStruct	(0X2F8,	"Elf64_Sym");
	MakeStruct	(0X310,	"Elf64_Sym");
	MakeStruct	(0X328,	"Elf64_Sym");
	MakeStruct	(0X340,	"Elf64_Sym");
	MakeStruct	(0X358,	"Elf64_Sym");
	MakeStruct	(0X370,	"Elf64_Sym");
	MakeStruct	(0X388,	"Elf64_Sym");
	MakeStruct	(0X3A0,	"Elf64_Sym");
	MakeStruct	(0X3B8,	"Elf64_Sym");
	MakeStruct	(0X3D0,	"Elf64_Sym");
	MakeStruct	(0X3E8,	"Elf64_Sym");
	MakeStruct	(0X400,	"Elf64_Sym");
	MakeStruct	(0X418,	"Elf64_Sym");
	MakeStruct	(0X430,	"Elf64_Sym");
	MakeStruct	(0X448,	"Elf64_Sym");
	MakeStruct	(0X460,	"Elf64_Sym");
	MakeStruct	(0X478,	"Elf64_Sym");
	MakeStruct	(0X490,	"Elf64_Sym");
	MakeStruct	(0X4A8,	"Elf64_Sym");
	MakeStruct	(0X4C0,	"Elf64_Sym");
	MakeStruct	(0X4D8,	"Elf64_Sym");
	MakeStruct	(0X4F0,	"Elf64_Sym");
	MakeStruct	(0X508,	"Elf64_Sym");
	MakeStruct	(0X520,	"Elf64_Sym");
	MakeStruct	(0X538,	"Elf64_Sym");
	MakeStruct	(0X550,	"Elf64_Sym");
	MakeStruct	(0X568,	"Elf64_Sym");
	MakeStruct	(0X580,	"Elf64_Sym");
	MakeStruct	(0X598,	"Elf64_Sym");
	update_extra_cmt		(0X5B0,	E_PREV + 0,	"; ELF String Table");
	create_byte	(0X5B0);
	create_strlit	(0X5B1,	0X5BB);
	set_name	(0X5B1,	"aLibcSo6");
	create_strlit	(0X5BB,	0X5C0);
	set_name	(0X5BB,	"aExit");
	create_strlit	(0X5C0,	0X5C6);
	set_name	(0X5C0,	"aSrand");
	create_strlit	(0X5C6,	0X5CD);
	set_name	(0X5C6,	"aSignal");
	create_strlit	(0X5CD,	0X5D2);
	set_name	(0X5CD,	"aPuts");
	create_strlit	(0X5D2,	0X5E3);
	set_name	(0X5D2,	"aStackChkFail");
	create_strlit	(0X5E3,	0X5E9);
	set_name	(0X5E3,	"aStdin");
	create_strlit	(0X5E9,	0X5F0);
	set_name	(0X5E9,	"aStrdup");
	create_strlit	(0X5F0,	0X5F7);
	set_name	(0X5F0,	"aPrintf");
	create_strlit	(0X5F7,	0X5FE);
	set_name	(0X5F7,	"aCalloc");
	create_strlit	(0X5FE,	0X605);
	set_name	(0X5FE,	"aMemset");
	create_strlit	(0X605,	0X60D);
	set_name	(0X605,	"aGetchar");
	create_strlit	(0X60D,	0X61E);
	set_name	(0X60D,	"aErrnoLocation");
	create_strlit	(0X61E,	0X623);
	set_name	(0X61E,	"aRead");
	create_strlit	(0X623,	0X62A);
	set_name	(0X623,	"aStdout");
	create_strlit	(0X62A,	0X631);
	set_name	(0X62A,	"aMalloc");
	create_strlit	(0X631,	0X637);
	set_name	(0X631,	"aAlarm");
	create_strlit	(0X637,	0X63C);
	set_name	(0X637,	"aAtoi");
	create_strlit	(0X63C,	0X64B);
	set_name	(0X63C,	"aCxaFinalize");
	create_strlit	(0X64B,	0X653);
	set_name	(0X64B,	"aSetvbuf");
	create_strlit	(0X653,	0X665);
	set_name	(0X653,	"aLibcStartMain");
	create_strlit	(0X665,	0X66A);
	set_name	(0X665,	"aFree");
	create_strlit	(0X66A,	0X671);
	set_name	(0X66A,	"aEdata");
	create_strlit	(0X671,	0X67D);
	set_name	(0X671,	"aBssStart");
	create_strlit	(0X67D,	0X682);
	set_name	(0X67D,	"aEnd");
	create_strlit	(0X682,	0X69E);
	set_name	(0X682,	"aItmDeregistert");
	create_strlit	(0X69E,	0X6AD);
	set_name	(0X69E,	"aGmonStart");
	create_strlit	(0X6AD,	0X6C1);
	set_name	(0X6AD,	"aJvRegisterclas");
	create_strlit	(0X6C1,	0X6DB);
	set_name	(0X6C1,	"aItmRegistertmc");
	create_strlit	(0X6DB,	0X6E5);
	set_name	(0X6DB,	"aGlibc24");
	create_strlit	(0X6E5,	0X6F1);
	set_name	(0X6E5,	"aGlibc225");
	create_byte	(0X6F1);
	make_array	(0X6F1,	0X7);
	create_qword	(0X6F8);
	make_array	(0X6F8,	0XD);
	set_cmt	(0X760,	"R_X86_64_RELATIVE",	0);
	update_extra_cmt		(0X760,	E_PREV + 0,	"; ELF RELA Relocation Table");
	MakeStruct	(0X760,	"Elf64_Rela");
	set_cmt	(0X778,	"R_X86_64_RELATIVE",	0);
	MakeStruct	(0X778,	"Elf64_Rela");
	set_cmt	(0X790,	"R_X86_64_RELATIVE",	0);
	MakeStruct	(0X790,	"Elf64_Rela");
	set_cmt	(0X7A8,	"R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable",	0);
	MakeStruct	(0X7A8,	"Elf64_Rela");
	set_cmt	(0X7C0,	"R_X86_64_GLOB_DAT stdout",	0);
	MakeStruct	(0X7C0,	"Elf64_Rela");
	set_cmt	(0X7D8,	"R_X86_64_GLOB_DAT stdin",	0);
	MakeStruct	(0X7D8,	"Elf64_Rela");
	set_cmt	(0X7F0,	"R_X86_64_GLOB_DAT __gmon_start__",	0);
	MakeStruct	(0X7F0,	"Elf64_Rela");
	set_cmt	(0X808,	"R_X86_64_GLOB_DAT _Jv_RegisterClasses",	0);
	MakeStruct	(0X808,	"Elf64_Rela");
	set_cmt	(0X820,	"R_X86_64_GLOB_DAT _ITM_registerTMCloneTable",	0);
	MakeStruct	(0X820,	"Elf64_Rela");
	set_cmt	(0X838,	"R_X86_64_GLOB_DAT __cxa_finalize",	0);
	MakeStruct	(0X838,	"Elf64_Rela");
	set_cmt	(0X850,	"R_X86_64_JUMP_SLOT free",	0);
	update_extra_cmt		(0X850,	E_PREV + 0,	"; ELF JMPREL Relocation Table");
	MakeStruct	(0X850,	"Elf64_Rela");
	set_cmt	(0X868,	"R_X86_64_JUMP_SLOT __errno_location",	0);
	MakeStruct	(0X868,	"Elf64_Rela");
	set_cmt	(0X880,	"R_X86_64_JUMP_SLOT puts",	0);
	MakeStruct	(0X880,	"Elf64_Rela");
	set_cmt	(0X898,	"R_X86_64_JUMP_SLOT __stack_chk_fail",	0);
	MakeStruct	(0X898,	"Elf64_Rela");
	set_cmt	(0X8B0,	"R_X86_64_JUMP_SLOT printf",	0);
	MakeStruct	(0X8B0,	"Elf64_Rela");
	set_cmt	(0X8C8,	"R_X86_64_JUMP_SLOT memset",	0);
	MakeStruct	(0X8C8,	"Elf64_Rela");
	set_cmt	(0X8E0,	"R_X86_64_JUMP_SLOT alarm",	0);
	MakeStruct	(0X8E0,	"Elf64_Rela");
	set_cmt	(0X8F8,	"R_X86_64_JUMP_SLOT read",	0);
	MakeStruct	(0X8F8,	"Elf64_Rela");
	set_cmt	(0X910,	"R_X86_64_JUMP_SLOT __libc_start_main",	0);
	MakeStruct	(0X910,	"Elf64_Rela");
	set_cmt	(0X928,	"R_X86_64_JUMP_SLOT srand",	0);
	MakeStruct	(0X928,	"Elf64_Rela");
	set_cmt	(0X940,	"R_X86_64_JUMP_SLOT calloc",	0);
	MakeStruct	(0X940,	"Elf64_Rela");
	set_cmt	(0X958,	"R_X86_64_JUMP_SLOT getchar",	0);
	MakeStruct	(0X958,	"Elf64_Rela");
	set_cmt	(0X970,	"R_X86_64_JUMP_SLOT signal",	0);
	MakeStruct	(0X970,	"Elf64_Rela");
	set_cmt	(0X988,	"R_X86_64_JUMP_SLOT malloc",	0);
	MakeStruct	(0X988,	"Elf64_Rela");
	set_cmt	(0X9A0,	"R_X86_64_JUMP_SLOT setvbuf",	0);
	MakeStruct	(0X9A0,	"Elf64_Rela");
	set_cmt	(0X9B8,	"R_X86_64_JUMP_SLOT atoi",	0);
	MakeStruct	(0X9B8,	"Elf64_Rela");
	set_cmt	(0X9D0,	"R_X86_64_JUMP_SLOT exit",	0);
	MakeStruct	(0X9D0,	"Elf64_Rela");
	set_cmt	(0X9E8,	"R_X86_64_JUMP_SLOT strdup",	0);
	MakeStruct	(0X9E8,	"Elf64_Rela");
	set_cmt	(0XA00,	"R_X86_64_JUMP_SLOT rand",	0);
	MakeStruct	(0XA00,	"Elf64_Rela");
	create_insn	(x=0XA18);
	op_hex		(x,	1);
	set_name	(0XA18,	".init_proc");
	create_insn	(x=0XA2D);
	op_hex		(x,	1);
	make_array	(0XA32,	0XE);
	create_insn	(0XA40);
	make_array	(0XA4C,	0X4);
	create_insn	(0XA50);
	set_name	(0XA50,	".free");
	create_insn	(0XA56);
	create_insn	(0XA60);
	set_name	(0XA60,	".__errno_location");
	create_insn	(0XA66);
	create_insn	(0XA70);
	set_name	(0XA70,	".puts");
	create_insn	(0XA76);
	create_insn	(0XA80);
	set_name	(0XA80,	".__stack_chk_fail");
	create_insn	(0XA86);
	create_insn	(0XA90);
	set_name	(0XA90,	".printf");
	create_insn	(0XA96);
	create_insn	(0XAA0);
	set_name	(0XAA0,	".memset");
	create_insn	(0XAA6);
	create_insn	(0XAB0);
	set_name	(0XAB0,	".alarm");
	create_insn	(0XAB6);
	create_insn	(0XAC0);
	set_name	(0XAC0,	".read");
	create_insn	(0XAC6);
	create_insn	(0XAD0);
	set_name	(0XAD0,	".__libc_start_main");
	create_insn	(0XAD6);
	create_insn	(0XAE0);
	set_name	(0XAE0,	".srand");
	create_insn	(0XAE6);
	create_insn	(0XAF0);
	set_name	(0XAF0,	".calloc");
	create_insn	(0XAF6);
	create_insn	(0XB00);
	set_name	(0XB00,	".getchar");
	create_insn	(0XB06);
	create_insn	(0XB10);
	set_name	(0XB10,	".signal");
	create_insn	(0XB16);
	create_insn	(0XB20);
	set_name	(0XB20,	".malloc");
	create_insn	(0XB26);
	create_insn	(0XB30);
	set_name	(0XB30,	".setvbuf");
	create_insn	(0XB36);
	create_insn	(0XB40);
	set_name	(0XB40,	".atoi");
	create_insn	(0XB46);
	create_insn	(0XB50);
	set_name	(0XB50,	".exit");
	create_insn	(0XB56);
	create_insn	(0XB60);
	set_name	(0XB60,	".strdup");
	create_insn	(0XB66);
	create_insn	(0XB70);
	set_name	(0XB70,	".rand");
	create_insn	(0XB76);
	create_insn	(0XB80);
	set_name	(0XB80,	"__gmon_start__");
	make_array	(0XB86,	0X2);
	create_insn	(0XB88);
	set_name	(0XB88,	"__cxa_finalize");
	make_array	(0XB8E,	0X2);
	create_insn	(0XB90);
	set_name	(0XB90,	"start");
	set_cmt	(0XB92,	"rtld_fini",	0);
	set_cmt	(0XB95,	"argc",	0);
	set_cmt	(0XB96,	"ubp_av",	0);
	create_insn	(x=0XB99);
	op_hex		(x,	1);
	set_cmt	(0XB9E,	"stack_end",	0);
	set_cmt	(0XB9F,	"fini",	0);
	create_insn	(x=0XB9F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XBA6,	"init",	0);
	create_insn	(x=0XBA6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XBAD,	"main",	0);
	create_insn	(x=0XBAD);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0XBBA,	0X6);
	create_insn	(x=0XBC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XBC7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0XBEA,	0X6);
	create_insn	(0XBF0);
	make_array	(0XBF2,	0XE);
	create_insn	(x=0XC00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC07);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC15);
	op_hex		(x,	1);
	create_insn	(x=0XC1C);
	op_hex		(x,	1);
	create_insn	(x=0XC23);
	op_hex		(x,	1);
	make_array	(0XC37,	0X9);
	create_insn	(0XC40);
	make_array	(0XC42,	0XE);
	create_insn	(0XC50);
	make_array	(0XC82,	0XE);
	create_insn	(x=0XC90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0XCA2,	0X6);
	create_insn	(0XCA8);
	create_insn	(0XCC0);
	set_name	(0XCC0,	"handler");
	create_insn	(x=0XCC4);
	op_hex		(x,	1);
	create_insn	(x=0XCC8);
	op_stkvar	(x,	0);
	create_insn	(x=0XCCB);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XCD7,	"status",	0);
	create_insn	(0XCE1);
	set_cmt	(0XCEF,	"n",	0);
	set_cmt	(0XCF4,	"modes",	0);
	set_cmt	(0XCF9,	"buf",	0);
	set_cmt	(0XCFE,	"stream",	0);
	set_cmt	(0XD10,	"n",	0);
	set_cmt	(0XD15,	"modes",	0);
	set_cmt	(0XD1A,	"buf",	0);
	set_cmt	(0XD1F,	"stream",	0);
	create_insn	(x=0XD27);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XD2E,	"handler",	0);
	set_cmt	(0XD31,	"sig",	0);
	set_cmt	(0XD3B,	"seconds",	0);
	set_cmt	(0XD45,	"n",	0);
	set_cmt	(0XD4A,	"c",	0);
	create_insn	(x=0XD4F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XD56,	"s",	0);
	create_insn	(0XD61);
	create_insn	(x=0XD65);
	op_hex		(x,	1);
	create_insn	(x=0XD69);
	op_stkvar	(x,	0);
	create_insn	(x=0XD6D);
	op_stkvar	(x,	0);
	create_insn	(x=0XD73);
	op_stkvar	(x,	1);
	set_cmt	(0XD77,	"nbytes",	0);
	set_cmt	(0XD7C,	"buf",	0);
	set_cmt	(0XD7F,	"fd",	0);
	create_insn	(x=0XD89);
	op_stkvar	(x,	0);
	create_insn	(x=0XD8D);
	op_stkvar	(x,	0);
	create_insn	(x=0XD94);
	op_stkvar	(x,	0);
	create_insn	(x=0XDB5);
	op_stkvar	(x,	1);
	create_insn	(x=0XDC0);
	op_stkvar	(x,	1);
	create_insn	(x=0XDC9);
	op_stkvar	(x,	0);
	create_insn	(x=0XDCE);
	op_stkvar	(x,	1);
	create_insn	(x=0XDD6);
	op_stkvar	(x,	0);
	create_insn	(0XDE1);
	create_insn	(0XDE4);
	create_insn	(0XDE7);
	create_insn	(x=0XDEB);
	op_hex		(x,	1);
	create_insn	(x=0XDF8);
	op_stkvar	(x,	0);
	create_insn	(x=0XDFE);
	op_stkvar	(x,	1);
	create_insn	(x=0XE0F);
	op_stkvar	(x,	1);
	set_cmt	(0XE13,	"nptr",	0);
	create_insn	(x=0XE1B);
	op_stkvar	(x,	1);
	create_insn	(0XE2F);
	create_insn	(0XE31);
	create_insn	(x=0XE35);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE41);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE59);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE65);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE7D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE89);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XEA1);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XEA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XEB9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XEC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XED1);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XEDD);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XEE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XEF5);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XEFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF0D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF25);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF3D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF55);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF61);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF79);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF91);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFA9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFB5);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFCD);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFE5);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFFD);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1004);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1015);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1021);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1028);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1039);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1040);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1051);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1058);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1069);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1078);
	set_name	(0X1078,	"add_node");
	create_insn	(x=0X107C);
	op_hex		(x,	1);
	create_insn	(x=0X1080);
	op_stkvar	(x,	0);
	create_insn	(x=0X1084);
	op_stkvar	(x,	0);
	set_cmt	(0X1087,	"size",	0);
	set_cmt	(0X108C,	"nmemb",	0);
	create_insn	(x=0X1096);
	op_stkvar	(x,	0);
	create_insn	(x=0X109A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10C3);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X10DB);
	set_name	(0X10DB,	"call_list");
	create_insn	(x=0X10DF);
	op_hex		(x,	1);
	create_insn	(x=0X10E3);
	op_stkvar	(x,	0);
	create_insn	(x=0X10E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10F9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1103);
	op_stkvar	(x,	0);
	create_insn	(x=0X1107);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1111);
	op_stkvar	(x,	0);
	create_insn	(x=0X1117);
	op_stkvar	(x,	1);
	create_insn	(x=0X111B);
	op_stkvar	(x,	0);
	create_insn	(x=0X111F);
	op_stkvar	(x,	1);
	create_insn	(x=0X1126);
	op_stkvar	(x,	0);
	create_insn	(x=0X112A);
	op_stkvar	(x,	0);
	create_insn	(x=0X1135);
	op_stkvar	(x,	1);
	create_insn	(x=0X1140);
	op_stkvar	(x,	1);
	create_insn	(x=0X114A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1155);
	op_stkvar	(x,	0);
	create_insn	(x=0X1159);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1163);
	op_stkvar	(x,	0);
	create_insn	(x=0X1169);
	op_stkvar	(x,	1);
	create_insn	(x=0X1170);
	op_stkvar	(x,	0);
	create_insn	(x=0X1174);
	op_stkvar	(x,	1);
	create_insn	(x=0X1178);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1182);
	op_stkvar	(x,	1);
	create_insn	(x=0X1186);
	op_stkvar	(x,	0);
	create_insn	(x=0X118C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1193);
	op_stkvar	(x,	1);
	create_insn	(x=0X119A);
	op_stkvar	(x,	1);
	create_insn	(x=0X11A1);
	op_stkvar	(x,	0);
	create_insn	(x=0X11A5);
	op_stkvar	(x,	1);
	set_cmt	(0X11A9,	"ptr",	0);
	create_insn	(x=0X11B1);
	op_stkvar	(x,	1);
	create_insn	(x=0X11BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X11C0);
	op_stkvar	(x,	0);
	create_insn	(x=0X11C4);
	op_stkvar	(x,	0);
	create_insn	(0X11D3);
	create_insn	(0X11D6);
	create_insn	(x=0X11DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11EB);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1200);
	op_hex		(x,	1);
	create_insn	(x=0X1207);
	op_hex		(x,	1);
	create_insn	(x=0X1210);
	op_hex		(x,	1);
	create_insn	(x=0X1225);
	op_hex		(x,	1);
	create_insn	(x=0X1229);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1236);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1247);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X125B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1267);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1272);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X127D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X128E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X129E);
	set_name	(0X129E,	"add");
	create_insn	(x=0X12A2);
	op_hex		(x,	1);
	create_insn	(x=0X12A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12B7);
	op_stkvar	(x,	0);
	create_insn	(x=0X12BF);
	op_stkvar	(x,	0);
	create_insn	(x=0X12C9);
	op_stkvar	(x,	0);
	create_insn	(x=0X12D5);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X12E2);
	op_hex		(x,	1);
	create_insn	(x=0X12F5);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X130B);
	op_stkvar	(x,	0);
	create_insn	(x=0X130E);
	op_stkvar	(x,	0);
	create_insn	(x=0X1318);
	op_stkvar	(x,	0);
	create_insn	(x=0X1322);
	op_stkvar	(x,	1);
	create_insn	(x=0X1327);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X132E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1334);
	op_hex		(x,	1);
	create_insn	(x=0X1342);
	op_stkvar	(x,	1);
	set_cmt	(0X134A,	"size",	0);
	create_insn	(x=0X1355);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X135C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1362);
	op_hex		(x,	1);
	create_insn	(x=0X136C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1378);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X137F);
	op_stkvar	(x,	1);
	create_insn	(x=0X1385);
	op_hex		(x,	1);
	create_insn	(x=0X1396);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X139D);
	op_stkvar	(x,	1);
	create_insn	(x=0X13A3);
	op_hex		(x,	1);
	create_insn	(x=0X13B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13D5);
	op_stkvar	(x,	0);
	create_insn	(x=0X13DD);
	op_stkvar	(x,	0);
	create_insn	(x=0X13E3);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13F9);
	op_stkvar	(x,	0);
	create_insn	(x=0X13FD);
	op_stkvar	(x,	0);
	create_insn	(x=0X1409);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1415);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1421);
	create_insn	(0X1424);
	create_insn	(0X1427);
	set_name	(0X1427,	"update");
	create_insn	(x=0X142B);
	op_hex		(x,	1);
	create_insn	(x=0X142F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1440);
	op_stkvar	(x,	0);
	create_insn	(x=0X1448);
	op_stkvar	(x,	0);
	create_insn	(x=0X1452);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1468);
	op_stkvar	(x,	0);
	create_insn	(x=0X146B);
	op_stkvar	(x,	0);
	create_insn	(x=0X1475);
	op_stkvar	(x,	0);
	create_insn	(x=0X147F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1486);
	op_stkvar	(x,	1);
	create_insn	(x=0X148C);
	op_hex		(x,	1);
	create_insn	(x=0X149B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14A7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X14B4);
	op_hex		(x,	1);
	create_insn	(x=0X14C5);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X14D2);
	op_hex		(x,	1);
	create_insn	(x=0X14E7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14F5);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1501);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X150D);
	set_name	(0X150D,	"delete");
	create_insn	(x=0X1511);
	op_hex		(x,	1);
	create_insn	(x=0X1515);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1526);
	op_stkvar	(x,	0);
	create_insn	(x=0X152E);
	op_stkvar	(x,	0);
	create_insn	(x=0X1538);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X154E);
	op_stkvar	(x,	0);
	create_insn	(x=0X1551);
	op_stkvar	(x,	0);
	create_insn	(x=0X155B);
	op_stkvar	(x,	0);
	create_insn	(x=0X1565);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X156C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1572);
	op_hex		(x,	1);
	create_insn	(x=0X1581);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1588);
	op_stkvar	(x,	1);
	create_insn	(x=0X158E);
	op_hex		(x,	1);
	set_cmt	(0X1598,	"ptr",	0);
	create_insn	(x=0X15A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15A7);
	op_stkvar	(x,	1);
	create_insn	(x=0X15AD);
	op_hex		(x,	1);
	create_insn	(x=0X15BB);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X15C8);
	op_hex		(x,	1);
	create_insn	(x=0X15DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1600);
	set_name	(0X1600,	"view");
	create_insn	(x=0X1604);
	op_hex		(x,	1);
	create_insn	(x=0X1608);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1619);
	op_stkvar	(x,	0);
	create_insn	(x=0X1621);
	op_stkvar	(x,	0);
	create_insn	(x=0X1627);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X163D);
	op_stkvar	(x,	0);
	create_insn	(x=0X1640);
	op_stkvar	(x,	0);
	create_insn	(x=0X1646);
	op_stkvar	(x,	0);
	create_insn	(x=0X164C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1653);
	op_stkvar	(x,	1);
	create_insn	(x=0X1659);
	op_hex		(x,	1);
	create_insn	(x=0X1668);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X166F);
	op_stkvar	(x,	1);
	create_insn	(x=0X1675);
	op_hex		(x,	1);
	set_cmt	(0X167F,	"s",	0);
	create_insn	(x=0X1687);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1695);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16A1);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X16AD);
	set_name	(0X16AD,	"main");
	create_insn	(x=0X16B1);
	op_hex		(x,	1);
	create_insn	(x=0X16BE);
	op_stkvar	(x,	0);
	create_insn	(x=0X16C4);
	op_stkvar	(x,	0);
	create_insn	(x=0X16CC);
	op_stkvar	(x,	0);
	create_insn	(x=0X16D4);
	op_stkvar	(x,	0);
	create_insn	(x=0X16DC);
	op_stkvar	(x,	0);
	create_insn	(x=0X16E4);
	op_stkvar	(x,	0);
	create_insn	(x=0X16EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16F3);
	op_stkvar	(x,	0);
	create_insn	(x=0X16F7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16FE);
	op_stkvar	(x,	0);
	create_insn	(x=0X1702);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1709);
	op_stkvar	(x,	0);
	create_insn	(x=0X170D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1714);
	op_stkvar	(x,	0);
	create_insn	(x=0X172C);
	op_stkvar	(x,	1);
	set_cmt	(0X1730,	"n",	0);
	set_cmt	(0X1735,	"c",	0);
	set_cmt	(0X173A,	"s",	0);
	create_insn	(x=0X1742);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X174E);
	op_stkvar	(x,	1);
	set_cmt	(0X1752,	"nbytes",	0);
	set_cmt	(0X1757,	"buf",	0);
	set_cmt	(0X175A,	"fd",	0);
	create_insn	(x=0X1764);
	op_stkvar	(x,	1);
	set_cmt	(0X1768,	"s",	0);
	create_insn	(x=0X1770);
	op_stkvar	(x,	0);
	create_insn	(x=0X1774);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X177D,	"seed",	0);
	create_insn	(x=0X1784);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1798);
	op_stkvar	(x,	1);
	create_insn	(x=0X179F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17BA);
	op_stkvar	(x,	0);
	create_insn	(x=0X17BD);
	op_stkvar	(x,	0);
	create_insn	(x=0X17C7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X17D3,	"status",	0);
	create_insn	(x=0X17DD);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17F3);
	op_stkvar	(x,	0);
	create_insn	(x=0X17F6);
	op_stkvar	(x,	0);
	create_insn	(x=0X17FC);
	op_stkvar	(x,	0);
	create_insn	(x=0X1802);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1813);
	create_insn	(x=0X181C);
	op_hex		(x,	1);
	create_insn	(x=0X181F);
	op_hex		(x,	1);
	create_insn	(x=0X1824);
	op_hex		(x,	1);
	create_insn	(x=0X182D);
	op_stkvar	(x,	1);
	create_insn	(x=0X183F);
	op_stkvar	(x,	0);
	create_insn	(x=0X1843);
	op_stkvar	(x,	0);
	create_insn	(x=0X1853);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X186C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1878);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1881);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X188E,	"status",	0);
	create_insn	(x=0X1898);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18A1);
	op_stkvar	(x,	1);
	create_insn	(x=0X18AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18BB);
	op_stkvar	(x,	1);
	create_insn	(0X18CF);
	make_array	(0X18D1,	0XF);
	create_insn	(0X18E0);
	set_name	(0X18E0,	"init");
	create_insn	(x=0X18EB);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18F3);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1904);
	op_hex		(x,	1);
	create_insn	(x=0X1908);
	op_hex		(x,	1);
	create_insn	(x=0X1936);
	op_hex		(x,	1);
	make_array	(0X1945,	0XB);
	create_insn	(0X1950);
	set_name	(0X1950,	"fini");
	make_array	(0X1952,	0X2);
	create_insn	(x=0X1954);
	op_hex		(x,	1);
	set_name	(0X1954,	".term_proc");
	create_insn	(x=0X1958);
	op_hex		(x,	1);
	make_array	(0X195D,	0X3);
	create_strlit	(0X1968,	0X1971);
	set_name	(0X1968,	"s");
	make_array	(0X1971,	0X7);
	create_strlit	(0X1978,	0X19BF);
	create_strlit	(0X19F9,	0X19FC);
	set_name	(0X19F9,	"format");
	make_array	(0X19FC,	0X4);
	create_strlit	(0X1A00,	0X1A07);
	set_name	(0X1A00,	"a034m");
	create_strlit	(0X1A88,	0X1A8F);
	set_name	(0X1A88,	"a037m");
	create_strlit	(0X1BB0,	0X1BBC);
	set_name	(0X1BB0,	"a013494m");
	create_strlit	(0X1D50,	0X1D57);
	set_name	(0X1D50,	"a034m_0");
	create_strlit	(0X1E68,	0X1E6F);
	set_name	(0X1E68,	"a034m_1");
	create_strlit	(0X1FE8,	0X1FEF);
	set_name	(0X1FE8,	"a037m_0");
	create_strlit	(0X2100,	0X2107);
	set_name	(0X2100,	"a037m_1");
	create_strlit	(0X214E,	0X215F);
	set_name	(0X214E,	"aSHasPassed");
	create_strlit	(0X2160,	0X21AD);
	set_name	(0X2160,	"aYouAreNotInter");
	create_strlit	(0X21AD,	0X21CB);
	set_name	(0X21AD,	"aDoYouWantToAdd");
	create_strlit	(0X21CB,	0X21E7);
	set_name	(0X21CB,	"aInputTheSizeOf");
	create_strlit	(0X21E8,	0X2207);
	set_name	(0X21E8,	"aInputTheConten");
	create_strlit	(0X2207,	0X2210);
	set_name	(0X2207,	"aSuccess");
	create_strlit	(0X2210,	0X2240);
	set_name	(0X2210,	"aDoYouWantToAdd_0");
	create_strlit	(0X2240,	0X2261);
	set_name	(0X2240,	"aDoYouWantToUpd");
	create_strlit	(0X2261,	0X227E);
	set_name	(0X2261,	"aInputTheIndexO");
	make_array	(0X227E,	0X2);
	create_strlit	(0X2280,	0X22A3);
	set_name	(0X2280,	"aInputTheNewCon");
	make_array	(0X22A3,	0X5);
	create_strlit	(0X22A8,	0X22C9);
	set_name	(0X22A8,	"aDoYouWantToDel");
	make_array	(0X22C9,	0X7);
	create_strlit	(0X22D0,	0X22EF);
	set_name	(0X22D0,	"aDoYouWantToVie");
	create_strlit	(0X22EF,	0X2307);
	set_name	(0X22EF,	"aPleaseInputYou");
	create_strlit	(0X2308,	0X233A);
	set_name	(0X2308,	"aHowManyDaysDoY");
	make_array	(0X233A,	0X6);
	create_strlit	(0X2340,	0X236A);
	set_name	(0X2340,	"aYouShouldnTBeA");
	make_array	(0X236A,	0X6);
	create_strlit	(0X2370,	0X23AA);
	set_name	(0X2370,	"aHowManyTimesDo");
	create_strlit	(0X23AA,	0X23B5);
	set_name	(0X23AA,	"aTryAgain");
	create_strlit	(0X23B5,	0X23BA);
	set_name	(0X23B5,	"aBye");
	make_array	(0X23BA,	0X2);
	update_extra_cmt		(0X202DD0,	E_PREV + 0,	"; ELF Initialization Function Table");
	create_qword	(x=0X202DD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	update_extra_cmt		(0X202DD8,	E_PREV + 0,	"; ELF Termination Function Table");
	create_qword	(x=0X202DD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X202DE8,	"DT_NEEDED libc.so.6",	0);
	update_extra_cmt		(0X202DE8,	E_PREV + 0,	"; ELF Dynamic Information");
	MakeStruct	(0X202DE8,	"Elf64_Dyn");
	set_cmt	(0X202DF8,	"DT_INIT ",	0);
	MakeStruct	(0X202DF8,	"Elf64_Dyn");
	set_cmt	(0X202E08,	"DT_FINI ",	0);
	MakeStruct	(0X202E08,	"Elf64_Dyn");
	set_cmt	(0X202E18,	"DT_INIT_ARRAY ",	0);
	MakeStruct	(0X202E18,	"Elf64_Dyn");
	set_cmt	(0X202E28,	"DT_INIT_ARRAYSZ ",	0);
	MakeStruct	(0X202E28,	"Elf64_Dyn");
	set_cmt	(0X202E38,	"DT_FINI_ARRAY ",	0);
	MakeStruct	(0X202E38,	"Elf64_Dyn");
	set_cmt	(0X202E48,	"DT_FINI_ARRAYSZ ",	0);
	MakeStruct	(0X202E48,	"Elf64_Dyn");
	set_cmt	(0X202E58,	"DT_GNU_HASH ",	0);
	MakeStruct	(0X202E58,	"Elf64_Dyn");
	set_cmt	(0X202E68,	"DT_STRTAB ",	0);
	MakeStruct	(0X202E68,	"Elf64_Dyn");
	set_cmt	(0X202E78,	"DT_SYMTAB ",	0);
	MakeStruct	(0X202E78,	"Elf64_Dyn");
	set_cmt	(0X202E88,	"DT_STRSZ ",	0);
	MakeStruct	(0X202E88,	"Elf64_Dyn");
	set_cmt	(0X202E98,	"DT_SYMENT ",	0);
	MakeStruct	(0X202E98,	"Elf64_Dyn");
	set_cmt	(0X202EA8,	"DT_DEBUG ",	0);
	MakeStruct	(0X202EA8,	"Elf64_Dyn");
	set_cmt	(0X202EB8,	"DT_PLTGOT ",	0);
	MakeStruct	(0X202EB8,	"Elf64_Dyn");
	set_cmt	(0X202EC8,	"DT_PLTRELSZ ",	0);
	MakeStruct	(0X202EC8,	"Elf64_Dyn");
	set_cmt	(0X202ED8,	"DT_PLTREL ",	0);
	MakeStruct	(0X202ED8,	"Elf64_Dyn");
	set_cmt	(0X202EE8,	"DT_JMPREL ",	0);
	MakeStruct	(0X202EE8,	"Elf64_Dyn");
	set_cmt	(0X202EF8,	"DT_RELA ",	0);
	MakeStruct	(0X202EF8,	"Elf64_Dyn");
	set_cmt	(0X202F08,	"DT_RELASZ ",	0);
	MakeStruct	(0X202F08,	"Elf64_Dyn");
	set_cmt	(0X202F18,	"DT_RELAENT ",	0);
	MakeStruct	(0X202F18,	"Elf64_Dyn");
	set_cmt	(0X202F28,	"DT_FLAGS_1 ",	0);
	MakeStruct	(0X202F28,	"Elf64_Dyn");
	set_cmt	(0X202F38,	"DT_VERNEED ",	0);
	MakeStruct	(0X202F38,	"Elf64_Dyn");
	set_cmt	(0X202F48,	"DT_VERNEEDNUM ",	0);
	MakeStruct	(0X202F48,	"Elf64_Dyn");
	set_cmt	(0X202F58,	"DT_VERSYM ",	0);
	MakeStruct	(0X202F58,	"Elf64_Dyn");
	set_cmt	(0X202F68,	"DT_RELACOUNT ",	0);
	MakeStruct	(0X202F68,	"Elf64_Dyn");
	set_cmt	(0X202F78,	"DT_NULL ",	0);
	MakeStruct	(0X202F78,	"Elf64_Dyn");
	create_qword	(x=0X202FC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X202FC8,	"_ITM_deregisterTMCloneTable_ptr");
	create_qword	(x=0X202FD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X202FD0,	"stdout_ptr");
	create_qword	(x=0X202FD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X202FD8,	"stdin_ptr");
	create_qword	(x=0X202FE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X202FE0,	"__gmon_start___ptr");
	create_qword	(x=0X202FE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X202FE8,	"_Jv_RegisterClasses_ptr");
	create_qword	(x=0X202FF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X202FF0,	"_ITM_registerTMCloneTable_ptr");
	create_qword	(x=0X202FF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X202FF8,	"__cxa_finalize_ptr");
	create_qword	(x=0X203000);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X203008);
	create_qword	(0X203010);
	create_qword	(x=0X203018);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X203020);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X203028);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X203030);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X203038);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X203040);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X203048);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X203050);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X203058);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X203060);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X203068);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X203070);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X203078);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X203080);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X203088);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X203090);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X203098);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X2030A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X2030A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X2030B0,	0X10);
	create_qword	(x=0X2030C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X2030D0,	0X10);
	create_strlit	(0X203100,	0X203107);
	set_name	(0X203100,	"aMonday");
	create_strlit	(0X20310C,	0X203114);
	set_name	(0X20310C,	"aTuesday");
	create_strlit	(0X203118,	0X203122);
	set_name	(0X203118,	"aWednesday");
	create_strlit	(0X203124,	0X20312D);
	set_name	(0X203124,	"aThursday");
	create_strlit	(0X203130,	0X203137);
	set_name	(0X203130,	"aFriday");
	create_strlit	(0X20313C,	0X203145);
	set_name	(0X20313C,	"aSaturday");
	create_strlit	(0X203148,	0X20314F);
	set_name	(0X203148,	"aSunday");
	set_cmt	(0X203154,	"Alternative name is '__bss_start'\n_edata",	0);
	set_name	(0X203154,	"__bss_start");
	create_byte	(0X203160);
	make_array	(0X203161,	0X7);
	set_name	(0X203168,	"head");
	create_qword	(0X203180);
	make_array	(0X203180,	0X20);
	set_name	(0X203280,	"_end");
	create_insn	(0X203288);
	set_name	(0X203288,	"free");
	create_insn	(0X203290);
	set_name	(0X203290,	"__errno_location");
	set_name	(0X203298,	"stdout");
	create_insn	(0X2032A0);
	set_name	(0X2032A0,	"puts");
	set_name	(0X2032A8,	"stdin");
	create_insn	(0X2032B0);
	set_name	(0X2032B0,	"__stack_chk_fail");
	create_insn	(0X2032B8);
	set_name	(0X2032B8,	"printf");
	create_insn	(0X2032C0);
	set_name	(0X2032C0,	"memset");
	create_insn	(0X2032C8);
	set_name	(0X2032C8,	"alarm");
	create_insn	(0X2032D0);
	set_name	(0X2032D0,	"read");
	create_insn	(0X2032D8);
	set_name	(0X2032D8,	"__libc_start_main");
	create_insn	(0X2032E0);
	set_name	(0X2032E0,	"srand");
	create_insn	(0X2032E8);
	set_name	(0X2032E8,	"calloc");
	create_insn	(0X2032F0);
	set_name	(0X2032F0,	"getchar");
	create_insn	(0X2032F8);
	set_name	(0X2032F8,	"signal");
	create_insn	(0X203300);
	set_name	(0X203300,	"malloc");
	create_insn	(0X203308);
	set_name	(0X203308,	"setvbuf");
	create_insn	(0X203310);
	set_name	(0X203310,	"atoi");
	create_insn	(0X203318);
	set_name	(0X203318,	"exit");
	create_insn	(0X203320);
	set_name	(0X203320,	"strdup");
	create_insn	(0X203328);
	set_name	(0X203328,	"__imp___cxa_finalize");
	create_insn	(0X203330);
	set_name	(0X203330,	"rand");
	set_name	(0X203338,	"_ITM_deregisterTMCloneTable");
	set_name	(0X203340,	"__imp___gmon_start__");
	create_insn	(0X203348);
	set_name	(0X203348,	"_Jv_RegisterClasses");
	set_name	(0X203350,	"_ITM_registerTMCloneTable");
}

static Functions_0(void) {

	add_func    (0XA18,0XA32);
	set_func_flags(0XA18,0x4400);
	set_frame_size(0XA18, 0X8, 0, 0);
	add_func    (0XA40,0XA4C);
	set_func_flags(0XA40,0x400);
	add_func    (0XA50,0XA56);
	set_func_flags(0XA50,0x4c0);
	SetType(0XA50, "void free(void *ptr);");
	add_func    (0XA60,0XA66);
	set_func_flags(0XA60,0x4c0);
	SetType(0XA60, "int *__errno_location(void);");
	add_func    (0XA70,0XA76);
	set_func_flags(0XA70,0x4c0);
	SetType(0XA70, "int puts(const char *s);");
	add_func    (0XA80,0XA86);
	set_func_flags(0XA80,0x4c1);
	add_func    (0XA90,0XA96);
	set_func_flags(0XA90,0x4c0);
	SetType(0XA90, "int printf(const char *format, ...);");
	add_func    (0XAA0,0XAA6);
	set_func_flags(0XAA0,0x4c0);
	SetType(0XAA0, "void *memset(void *s, int c, size_t n);");
	add_func    (0XAB0,0XAB6);
	set_func_flags(0XAB0,0x4c0);
	SetType(0XAB0, "unsigned int alarm(unsigned int seconds);");
	add_func    (0XAC0,0XAC6);
	set_func_flags(0XAC0,0x4c0);
	SetType(0XAC0, "ssize_t read(int fd, void *buf, size_t nbytes);");
	add_func    (0XAD0,0XAD6);
	set_func_flags(0XAD0,0x4c0);
	SetType(0XAD0, "int __cdecl __libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);");
	add_func    (0XAE0,0XAE6);
	set_func_flags(0XAE0,0x4c0);
	SetType(0XAE0, "void srand(unsigned int seed);");
	add_func    (0XAF0,0XAF6);
	set_func_flags(0XAF0,0x4c0);
	SetType(0XAF0, "void *calloc(size_t nmemb, size_t size);");
	add_func    (0XB00,0XB06);
	set_func_flags(0XB00,0x4c0);
	SetType(0XB00, "int getchar(void);");
	add_func    (0XB10,0XB16);
	set_func_flags(0XB10,0x4c0);
	SetType(0XB10, "__sighandler_t signal(int sig, __sighandler_t handler);");
	add_func    (0XB20,0XB26);
	set_func_flags(0XB20,0x4c0);
	SetType(0XB20, "void *malloc(size_t size);");
	add_func    (0XB30,0XB36);
	set_func_flags(0XB30,0x4c0);
	SetType(0XB30, "int setvbuf(FILE *stream, char *buf, int modes, size_t n);");
	add_func    (0XB40,0XB46);
	set_func_flags(0XB40,0x4c0);
	SetType(0XB40, "int atoi(const char *nptr);");
	add_func    (0XB50,0XB56);
	set_func_flags(0XB50,0x4c1);
	SetType(0XB50, "void __noreturn exit(int status);");
	add_func    (0XB60,0XB66);
	set_func_flags(0XB60,0x4c0);
	SetType(0XB60, "char *strdup(const char *s);");
	add_func    (0XB70,0XB76);
	set_func_flags(0XB70,0x4c0);
	SetType(0XB70, "int rand(void);");
	add_func    (0XB80,0XB86);
	set_func_flags(0XB80,0x4c0);
	add_func    (0XB88,0XB8E);
	set_func_flags(0XB88,0x4c0);
	add_func    (0XB90,0XBBA);
	set_func_flags(0XB90,0x401);
	add_func    (0XBC0,0XBF2);
	set_func_flags(0XBC0,0x4410);
	set_frame_size(0XBC0, 0, 8, 0);
	add_func    (0XC50,0XC82);
	set_func_flags(0XC50,0x4400);
	set_frame_size(0XC50, 0, 0, 0);
	add_func    (0XC90,0XCC0);
	set_func_flags(0XC90,0x400);
	add_func    (0XCC0,0XCE1);
	set_func_flags(0XCC0,0x411);
	SetType(0XCC0, "void handler(int);");
	set_frame_size(0XCC0, 0X10, 8, 0);
	add_func    (0XCE1,0XD61);
	set_func_flags(0XCE1,0x4410);
	set_frame_size(0XCE1, 0, 8, 0);
	add_func    (0XD61,0XDE7);
	set_func_flags(0XD61,0x4410);
	set_frame_size(0XD61, 0X20, 8, 0);
	define_local_var(0XD61, 0XDE7, "[bp-0X18]", "buf");
	add_func    (0XDE7,0XE31);
	set_func_flags(0XDE7,0x4410);
	set_frame_size(0XDE7, 0X20, 8, 0);
	define_local_var(0XDE7, 0XE31, "[bp-0X20]", "nptr");
	add_func    (0XE31,0X1078);
	set_func_flags(0XE31,0x4410);
	set_frame_size(0XE31, 0, 8, 0);
	add_func    (0X1078,0X10DB);
	set_func_flags(0X1078,0x4410);
	set_frame_size(0X1078, 0X20, 8, 0);
	add_func    (0X10DB,0X11D6);
	set_func_flags(0X10DB,0x4410);
	set_frame_size(0X10DB, 0X30, 8, 0);
	define_local_var(0X10DB, 0X11D6, "[bp-0X20]", "ptr");
	define_local_var(0X10DB, 0X11D6, "[bp-0X18]", "next");
	add_func    (0X11D6,0X129E);
	set_func_flags(0X11D6,0x4410);
	set_frame_size(0X11D6, 0, 8, 0);
	add_func    (0X129E,0X1427);
	set_func_flags(0X129E,0x4410);
	set_frame_size(0X129E, 0X10, 8, 0);
	add_func    (0X1427,0X150D);
	set_func_flags(0X1427,0x4410);
	set_frame_size(0X1427, 0X10, 8, 0);
	add_func    (0X150D,0X1600);
	set_func_flags(0X150D,0x4410);
	set_frame_size(0X150D, 0X10, 8, 0);
	add_func    (0X1600,0X16AD);
	set_func_flags(0X1600,0x4410);
	set_frame_size(0X1600, 0X10, 8, 0);
	add_func    (0X16AD,0X18D1);
	set_func_flags(0X16AD,0x4410);
	SetType(0X16AD, "int __cdecl main(int, char **, char **);");
	set_frame_size(0X16AD, 0X60, 8, 0);
	define_local_var(0X16AD, 0X18D1, "[bp-0X50]", "add_address");
	define_local_var(0X16AD, 0X18D1, "[bp-0X48]", "update_address");
	define_local_var(0X16AD, 0X18D1, "[bp-0X40]", "delete_address");
	define_local_var(0X16AD, 0X18D1, "[bp-0X38]", "view_address");
	define_local_var(0X16AD, 0X18D1, "[bp-0X20]", "name");
	add_func    (0X18E0,0X1945);
	set_func_flags(0X18E0,0x4400);
	SetType(0X18E0, "void init(void);");
	set_frame_size(0X18E0, 0X38, 0, 0);
	add_func    (0X1950,0X1952);
	set_func_flags(0X1950,0x4440);
	SetType(0X1950, "void fini(void);");
	set_frame_size(0X1950, 0, 0, 0);
	add_func    (0X1954,0X195D);
	set_func_flags(0X1954,0x4400);
	set_frame_size(0X1954, 0X8, 0, 0);
	add_func    (0X203288,0X203290);
	set_func_flags(0X203288,0x400);
	SetType(0X203288, "void free(void *ptr);");
	add_func    (0X203290,0X203298);
	set_func_flags(0X203290,0x400);
	SetType(0X203290, "int *_errno_location(void);");
	add_func    (0X2032A0,0X2032A8);
	set_func_flags(0X2032A0,0x400);
	SetType(0X2032A0, "int puts(const char *s);");
	add_func    (0X2032B0,0X2032B8);
	set_func_flags(0X2032B0,0x401);
	add_func    (0X2032B8,0X2032C0);
	set_func_flags(0X2032B8,0x400);
	SetType(0X2032B8, "int printf(const char *format, ...);");
	add_func    (0X2032C0,0X2032C8);
	set_func_flags(0X2032C0,0x400);
	SetType(0X2032C0, "void *memset(void *s, int c, size_t n);");
	add_func    (0X2032C8,0X2032D0);
	set_func_flags(0X2032C8,0x400);
	SetType(0X2032C8, "unsigned int alarm(unsigned int seconds);");
	add_func    (0X2032D0,0X2032D8);
	set_func_flags(0X2032D0,0x400);
	SetType(0X2032D0, "ssize_t read(int fd, void *buf, size_t nbytes);");
	add_func    (0X2032D8,0X2032E0);
	set_func_flags(0X2032D8,0x400);
	SetType(0X2032D8, "int __cdecl _libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);");
	add_func    (0X2032E0,0X2032E8);
	set_func_flags(0X2032E0,0x400);
	SetType(0X2032E0, "void srand(unsigned int seed);");
	add_func    (0X2032E8,0X2032F0);
	set_func_flags(0X2032E8,0x400);
	SetType(0X2032E8, "void *calloc(size_t nmemb, size_t size);");
	add_func    (0X2032F0,0X2032F8);
	set_func_flags(0X2032F0,0x400);
	SetType(0X2032F0, "int getchar(void);");
	add_func    (0X2032F8,0X203300);
	set_func_flags(0X2032F8,0x400);
	SetType(0X2032F8, "__sighandler_t signal(int sig, __sighandler_t handler);");
	add_func    (0X203300,0X203308);
	set_func_flags(0X203300,0x400);
	SetType(0X203300, "void *malloc(size_t size);");
	add_func    (0X203308,0X203310);
	set_func_flags(0X203308,0x400);
	SetType(0X203308, "int setvbuf(FILE *stream, char *buf, int modes, size_t n);");
	add_func    (0X203310,0X203318);
	set_func_flags(0X203310,0x400);
	SetType(0X203310, "int atoi(const char *nptr);");
	add_func    (0X203318,0X203320);
	set_func_flags(0X203318,0x401);
	SetType(0X203318, "void __noreturn exit(int status);");
	add_func    (0X203320,0X203328);
	set_func_flags(0X203320,0x400);
	SetType(0X203320, "char *strdup(const char *s);");
	add_func    (0X203328,0X203330);
	set_func_flags(0X203328,0x400);
	add_func    (0X203330,0X203338);
	set_func_flags(0X203330,0x400);
	SetType(0X203330, "int rand(void);");
	add_func    (0X203348,0X203350);
	set_func_flags(0X203348,0x400);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0,"es",0,3);
	split_sreg_range(0XA18,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA32,"es",0,3);
	split_sreg_range(0XA40,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB80,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB90,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1952,"es",0,3);
	split_sreg_range(0X1954,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X195D,"es",0,3);
	split_sreg_range(0X1960,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23BA,"es",0,3);
	split_sreg_range(0X23BC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2450,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202DD0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202DD8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202DE0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202DE8,"es",0,3);
	split_sreg_range(0X202FC8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203000,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2030B0,"es",0,3);
	split_sreg_range(0X2030C0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203154,"es",0,3);
	split_sreg_range(0X203160,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203280,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203288,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0,"ss",0,3);
	split_sreg_range(0XA18,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA32,"ss",0,3);
	split_sreg_range(0XA40,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB80,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB90,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1952,"ss",0,3);
	split_sreg_range(0X1954,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X195D,"ss",0,3);
	split_sreg_range(0X1960,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23BA,"ss",0,3);
	split_sreg_range(0X23BC,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2450,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202DD0,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202DD8,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202DE0,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202DE8,"ss",0,3);
	split_sreg_range(0X202FC8,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203000,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2030B0,"ss",0,3);
	split_sreg_range(0X2030C0,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203154,"ss",0,3);
	split_sreg_range(0X203160,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203280,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203288,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0,"ds",0X11,3);
	split_sreg_range(0XA18,"ds",0X11,3);
	split_sreg_range(0XA32,"ds",0X11,3);
	split_sreg_range(0XA40,"ds",0X11,3);
	split_sreg_range(0XB80,"ds",0X11,3);
	split_sreg_range(0XB90,"ds",0X11,3);
	split_sreg_range(0X1952,"ds",0X11,3);
	split_sreg_range(0X1954,"ds",0X11,3);
	split_sreg_range(0X195D,"ds",0X11,3);
	split_sreg_range(0X1960,"ds",0X11,3);
	split_sreg_range(0X23BA,"ds",0X11,3);
	split_sreg_range(0X23BC,"ds",0X11,3);
	split_sreg_range(0X2450,"ds",0X11,3);
	split_sreg_range(0X202DD0,"ds",0X11,3);
	split_sreg_range(0X202DD8,"ds",0X11,3);
	split_sreg_range(0X202DE0,"ds",0X11,3);
	split_sreg_range(0X202DE8,"ds",0X11,3);
	split_sreg_range(0X202FC8,"ds",0X11,3);
	split_sreg_range(0X203000,"ds",0X11,3);
	split_sreg_range(0X2030B0,"ds",0X11,3);
	split_sreg_range(0X2030C0,"ds",0X11,3);
	split_sreg_range(0X203154,"ds",0X11,3);
	split_sreg_range(0X203160,"ds",0X11,3);
	split_sreg_range(0X203280,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203288,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0,"fs",0,3);
	split_sreg_range(0XA18,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA32,"fs",0,3);
	split_sreg_range(0XA40,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB80,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB90,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1952,"fs",0,3);
	split_sreg_range(0X1954,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X195D,"fs",0,3);
	split_sreg_range(0X1960,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23BA,"fs",0,3);
	split_sreg_range(0X23BC,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2450,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202DD0,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202DD8,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202DE0,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202DE8,"fs",0,3);
	split_sreg_range(0X202FC8,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203000,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2030B0,"fs",0,3);
	split_sreg_range(0X2030C0,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203154,"fs",0,3);
	split_sreg_range(0X203160,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203280,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203288,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0,"gs",0,3);
	split_sreg_range(0XA18,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA32,"gs",0,3);
	split_sreg_range(0XA40,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB80,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB90,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1952,"gs",0,3);
	split_sreg_range(0X1954,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X195D,"gs",0,3);
	split_sreg_range(0X1960,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23BA,"gs",0,3);
	split_sreg_range(0X23BC,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2450,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202DD0,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202DD8,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202DE0,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202DE8,"gs",0,3);
	split_sreg_range(0X202FC8,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203000,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2030B0,"gs",0,3);
	split_sreg_range(0X2030C0,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203154,"gs",0,3);
	split_sreg_range(0X203160,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203280,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203288,"gs",0XFFFFFFFFFFFFFFFF,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
        end_type_updating(UTP_STRUCT);
}

// End of file.
