//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |           Copyright (c) 2017 Hex-Rays, <support@hex-rays.com>           |
// |                      License info: 48-3FBD-7F04-2C                      |
// |                      Jiang Ying, Personal license                       |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  ApplyStrucTInfos();   // structure type infos
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("metapc", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 6);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLAG, SW_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 16);
	set_inf_attr(INF_COMMENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
	add_default_til("gnulnx_x64");
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	set_selector(0X1,0);
	set_selector(0X2,0);
	set_selector(0X3,0);
	set_selector(0X4,0);
	set_selector(0X5,0);
	set_selector(0X6,0);
	set_selector(0X7,0);
	set_selector(0X8,0);
	set_selector(0X9,0);
	set_selector(0XA,0);
	set_selector(0XB,0);
	set_selector(0XC,0);
	set_selector(0XD,0);
	set_selector(0XE,0);
	set_selector(0XF,0);
	set_selector(0X10,0);
	set_selector(0X11,0);
	set_selector(0X12,0);
	;
	add_segm_ex(0,0XA38,0X1,2,1,2,ADDSEG_NOSREG);
	SegRename(0,"LOAD");
	SegClass (0,"CODE");
	SegDefReg(0x0,"es",0x0);
	SegDefReg(0x0,"ss",0x0);
	SegDefReg(0x0,"ds",0x10);
	SegDefReg(0x0,"fs",0x0);
	SegDefReg(0x0,"gs",0x0);
	set_segm_type(0,2);
	add_segm_ex(0XA38,0XA4F,0X4,2,5,2,ADDSEG_NOSREG);
	SegRename(0XA38,".init");
	SegClass (0XA38,"CODE");
	SegDefReg(0xA38,"ds",0x10);
	set_segm_type(0XA38,2);
	add_segm_ex(0XA4F,0XA50,0X1,2,1,2,ADDSEG_NOSREG);
	SegRename(0XA4F,"LOAD");
	SegClass (0XA4F,"CODE");
	SegDefReg(0xA4F,"es",0x0);
	SegDefReg(0xA4F,"ss",0x0);
	SegDefReg(0xA4F,"ds",0x10);
	SegDefReg(0xA4F,"fs",0x0);
	SegDefReg(0xA4F,"gs",0x0);
	set_segm_type(0XA4F,2);
	add_segm_ex(0XA50,0XB00,0X5,2,3,2,ADDSEG_NOSREG);
	SegRename(0XA50,".plt");
	SegClass (0XA50,"CODE");
	SegDefReg(0xA50,"ds",0x10);
	set_segm_type(0XA50,2);
	add_segm_ex(0XB00,0XB08,0X6,2,10,2,ADDSEG_NOSREG);
	SegRename(0XB00,".plt.got");
	SegClass (0XB00,"CODE");
	SegDefReg(0xB00,"ds",0x10);
	set_segm_type(0XB00,2);
	add_segm_ex(0XB08,0XB10,0X1,2,1,2,ADDSEG_NOSREG);
	SegRename(0XB08,"LOAD");
	SegClass (0XB08,"CODE");
	SegDefReg(0xB08,"es",0x0);
	SegDefReg(0xB08,"ss",0x0);
	SegDefReg(0xB08,"ds",0x10);
	SegDefReg(0xB08,"fs",0x0);
	SegDefReg(0xB08,"gs",0x0);
	set_segm_type(0XB08,2);
	add_segm_ex(0XB10,0X16A2,0X7,2,3,2,ADDSEG_NOSREG);
	SegRename(0XB10,".text");
	SegClass (0XB10,"CODE");
	SegDefReg(0xB10,"ds",0x10);
	set_segm_type(0XB10,2);
	add_segm_ex(0X16A2,0X16A4,0X1,2,1,2,ADDSEG_NOSREG);
	SegRename(0X16A2,"LOAD");
	SegClass (0X16A2,"CODE");
	SegDefReg(0x16A2,"es",0x0);
	SegDefReg(0x16A2,"ss",0x0);
	SegDefReg(0x16A2,"ds",0x10);
	SegDefReg(0x16A2,"fs",0x0);
	SegDefReg(0x16A2,"gs",0x0);
	set_segm_type(0X16A2,2);
	add_segm_ex(0X16A4,0X16AD,0X8,2,5,2,ADDSEG_NOSREG);
	SegRename(0X16A4,".fini");
	SegClass (0X16A4,"CODE");
	SegDefReg(0x16A4,"ds",0x10);
	set_segm_type(0X16A4,2);
	add_segm_ex(0X16AD,0X16B0,0X1,2,1,2,ADDSEG_NOSREG);
	SegRename(0X16AD,"LOAD");
	SegClass (0X16AD,"CODE");
	SegDefReg(0x16AD,"es",0x0);
	SegDefReg(0x16AD,"ss",0x0);
	SegDefReg(0x16AD,"ds",0x10);
	SegDefReg(0x16AD,"fs",0x0);
	SegDefReg(0x16AD,"gs",0x0);
	set_segm_type(0X16AD,2);
	add_segm_ex(0X16B0,0X1873,0X9,2,10,2,ADDSEG_NOSREG);
	SegRename(0X16B0,".rodata");
	SegClass (0X16B0,"CONST");
	SegDefReg(0x16B0,"ds",0x10);
	set_segm_type(0X16B0,3);
	add_segm_ex(0X1873,0X1874,0X1,2,1,2,ADDSEG_NOSREG);
	SegRename(0X1873,"LOAD");
	SegClass (0X1873,"CODE");
	SegDefReg(0x1873,"es",0x0);
	SegDefReg(0x1873,"ss",0x0);
	SegDefReg(0x1873,"ds",0x10);
	SegDefReg(0x1873,"fs",0x0);
	SegDefReg(0x1873,"gs",0x0);
	set_segm_type(0X1873,2);
	add_segm_ex(0X1874,0X1938,0XA,2,5,2,ADDSEG_NOSREG);
	SegRename(0X1874,".eh_frame_hdr");
	SegClass (0X1874,"CONST");
	SegDefReg(0x1874,"ds",0x10);
	set_segm_type(0X1874,3);
	add_segm_ex(0X1938,0X1C68,0XB,2,10,2,ADDSEG_NOSREG);
	SegRename(0X1938,".eh_frame");
	SegClass (0X1938,"CONST");
	SegDefReg(0x1938,"ds",0x10);
	set_segm_type(0X1938,3);
	add_segm_ex(0X201CC0,0X201CC8,0XC,2,10,2,ADDSEG_NOSREG);
	SegRename(0X201CC0,".init_array");
	SegClass (0X201CC0,"DATA");
	SegDefReg(0x201CC0,"ds",0x10);
	set_segm_type(0X201CC0,3);
	add_segm_ex(0X201CC8,0X201CD0,0XD,2,10,2,ADDSEG_NOSREG);
	SegRename(0X201CC8,".fini_array");
	SegClass (0X201CC8,"DATA");
	SegDefReg(0x201CC8,"ds",0x10);
	set_segm_type(0X201CC8,3);
	add_segm_ex(0X201CD0,0X201D70,0XE,2,10,2,ADDSEG_NOSREG);
	SegRename(0X201CD0,".data.rel.ro");
	SegClass (0X201CD0,"DATA");
	SegDefReg(0x201CD0,"ds",0x10);
	set_segm_type(0X201CD0,3);
	add_segm_ex(0X201D70,0X201F70,0X2,2,1,2,ADDSEG_NOSREG);
	SegRename(0X201D70,"LOAD");
	SegClass (0X201D70,"DATA");
	SegDefReg(0x201D70,"es",0x0);
	SegDefReg(0x201D70,"ss",0x0);
	SegDefReg(0x201D70,"ds",0x10);
	SegDefReg(0x201D70,"fs",0x0);
	SegDefReg(0x201D70,"gs",0x0);
	set_segm_type(0X201D70,3);
	add_segm_ex(0X201F70,0X202000,0XF,2,10,2,ADDSEG_NOSREG);
	SegRename(0X201F70,".got");
	SegClass (0X201F70,"DATA");
	SegDefReg(0x201F70,"ds",0x10);
	set_segm_type(0X201F70,3);
	add_segm_ex(0X202000,0X202010,0X10,2,10,2,ADDSEG_NOSREG);
	SegRename(0X202000,".data");
	SegClass (0X202000,"DATA");
	SegDefReg(0x202000,"ds",0x10);
	set_segm_type(0X202000,3);
	add_segm_ex(0X202010,0X202020,0X2,2,1,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X202010,"LOAD");
	SegClass (0X202010,"DATA");
	SegDefReg(0x202010,"es",0x0);
	SegDefReg(0x202010,"ss",0x0);
	SegDefReg(0x202010,"ds",0x10);
	SegDefReg(0x202010,"fs",0x0);
	SegDefReg(0x202010,"gs",0x0);
	set_segm_type(0X202010,3);
	add_segm_ex(0X202020,0X2020E8,0X11,2,8,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X202020,".bss");
	SegClass (0X202020,"BSS");
	SegDefReg(0x202020,"ds",0x10);
	set_segm_type(0X202020,9);
	add_segm_ex(0X2020E8,0X202170,0X12,2,10,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X2020E8,"extern");
	SegClass (0X2020E8,"extern");
	set_segm_type(0X2020E8,1);
	set_inf_attr(INF_LOW_OFF, 0x20);
	set_inf_attr(INF_HIGH_OFF, 0x202170);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("Elf64_Sym");
	SetType(get_member_id(id, 0x0), "Node");
	id = get_struc_id("Elf64_Rela");
	SetType(get_member_id(id, 0x0), "unsigned __int64");
	SetType(get_member_id(id, 0x8), "unsigned __int64");
	SetType(get_member_id(id, 0x10), "__int64");
	id = get_struc_id("Elf64_Dyn");
	SetType(get_member_id(id, 0x0), "unsigned __int64");
	SetType(get_member_id(id, 0x8), "unsigned __int64");
	id = get_struc_id("Node");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x8), "char[16]");
	SetType(get_member_id(id, 0x18), "_QWORD");
	SetType(get_member_id(id, 0x20), "_QWORD *");
	id = get_struc_id("obj");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"Elf64_Sym",0);
	id = add_struc(-1,"Elf64_Rela",0);
	id = add_struc(-1,"Elf64_Dyn",0);
	id = add_struc(-1,"Node",0);
	id = add_struc(-1,"obj",0);
	
	id = get_struc_id("Node");
	mid = add_struc_member(id,"vtable",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"hash",	0X8,	0x000400,	-1,	16);
	mid = add_struc_member(id,"size",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"content",	0X20,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("Elf64_Sym");
	mid = add_struc_member(id,"st_name",	0,	0x60000400,	get_struc_id("Node"),	40);
	set_struc_align(id,3);
	
	id = get_struc_id("Elf64_Rela");
	mid = add_struc_member(id,"r_offset",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"r_info",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"r_addend",	0X10,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("Elf64_Dyn");
	mid = add_struc_member(id,"d_tag",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"d_un",	0X8,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("obj");
	mid = add_struc_member(id,"data",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"size",	0X8,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	set_cmt	(0,	"File format: \\x7FELF",	0);
	update_extra_cmt		(0,	E_PREV + 0,	"; File Name   : C:\\Users\\杨鑫顺\\Desktop\\2019强网杯\\babycpp");
	update_extra_cmt		(0,	E_PREV + 1,	"; Format      : ELF64 for x86-64 (Shared object)");
	update_extra_cmt		(0,	E_PREV + 2,	"; Interpreter '/lib64/ld-linux-x86-64.so.2'");
	update_extra_cmt		(0,	E_PREV + 3,	"; Needed Library 'libstdc++.so.6'");
	update_extra_cmt		(0,	E_PREV + 4,	"; Needed Library 'libc.so.6'");
	update_extra_cmt		(0,	E_PREV + 5,	"; ");
	create_dword	(x=0);
	op_hex		(x,	0);
	set_cmt	(0X4,	"File class: 64-bit",	0);
	create_byte	(x=0X4);
	op_hex		(x,	0);
	set_cmt	(0X5,	"Data encoding: little-endian",	0);
	create_byte	(x=0X5);
	op_hex		(x,	0);
	set_cmt	(0X6,	"File version",	0);
	create_byte	(x=0X6);
	op_hex		(x,	0);
	set_cmt	(0X7,	"OS/ABI: UNIX System V ABI",	0);
	create_byte	(x=0X7);
	op_hex		(x,	0);
	set_cmt	(0X8,	"ABI Version",	0);
	create_byte	(x=0X8);
	op_hex		(x,	0);
	set_cmt	(0X9,	"Padding",	0);
	create_byte	(x=0X9);
	make_array	(x,	0X7);
	op_hex		(x,	0);
	set_cmt	(0X10,	"File type: Shared object",	0);
	create_word	(x=0X10);
	op_hex		(x,	0);
	set_cmt	(0X12,	"Machine: x86-64",	0);
	create_word	(x=0X12);
	op_hex		(x,	0);
	set_cmt	(0X14,	"File version",	0);
	create_dword	(x=0X14);
	op_hex		(x,	0);
	set_cmt	(0X18,	"Entry point",	0);
	create_qword	(x=0X18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X20,	"PHT file offset",	0);
	create_qword	(x=0X20);
	op_hex		(x,	0);
	set_cmt	(0X28,	"SHT file offset",	0);
	create_qword	(x=0X28);
	op_hex		(x,	0);
	set_cmt	(0X30,	"Processor-specific flags",	0);
	create_dword	(x=0X30);
	op_hex		(x,	0);
	set_cmt	(0X34,	"ELF header size",	0);
	create_word	(x=0X34);
	op_hex		(x,	0);
	set_cmt	(0X36,	"PHT entry size",	0);
	create_word	(x=0X36);
	op_hex		(x,	0);
	set_cmt	(0X38,	"Number of entries in PHT",	0);
	create_word	(x=0X38);
	op_hex		(x,	0);
	set_cmt	(0X3A,	"SHT entry size",	0);
	create_word	(x=0X3A);
	op_hex		(x,	0);
	set_cmt	(0X3C,	"Number of entries in SHT",	0);
	create_word	(x=0X3C);
	op_hex		(x,	0);
	set_cmt	(0X3E,	"SHT entry index for string table",	0);
	create_word	(x=0X3E);
	op_hex		(x,	0);
	set_cmt	(0X40,	"Type: PHDR",	0);
	update_extra_cmt		(0X40,	E_PREV + 0,	"; ELF64 Program Header");
	update_extra_cmt		(0X40,	E_PREV + 1,	"; PHT Entry 0");
	create_dword	(x=0X40);
	op_hex		(x,	0);
	set_cmt	(0X44,	"Flags",	0);
	create_dword	(x=0X44);
	op_hex		(x,	0);
	set_cmt	(0X48,	"File offset",	0);
	create_qword	(x=0X48);
	op_hex		(x,	0);
	set_cmt	(0X50,	"Virtual address",	0);
	create_qword	(x=0X50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X58,	"Physical address",	0);
	create_qword	(x=0X58);
	op_hex		(x,	0);
	set_cmt	(0X60,	"Size in file image",	0);
	create_qword	(x=0X60);
	op_hex		(x,	0);
	set_cmt	(0X68,	"Size in memory image",	0);
	create_qword	(x=0X68);
	op_hex		(x,	0);
	set_cmt	(0X70,	"Alignment",	0);
	create_qword	(x=0X70);
	op_hex		(x,	0);
	set_cmt	(0X78,	"Type: INTERP",	0);
	update_extra_cmt		(0X78,	E_PREV + 0,	"; PHT Entry 1");
	create_dword	(x=0X78);
	op_hex		(x,	0);
	set_cmt	(0X7C,	"Flags",	0);
	create_dword	(x=0X7C);
	op_hex		(x,	0);
	set_cmt	(0X80,	"File offset",	0);
	create_qword	(x=0X80);
	op_hex		(x,	0);
	set_cmt	(0X88,	"Virtual address",	0);
	create_qword	(x=0X88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X90,	"Physical address",	0);
	create_qword	(x=0X90);
	op_hex		(x,	0);
	set_cmt	(0X98,	"Size in file image",	0);
	create_qword	(x=0X98);
	op_hex		(x,	0);
	set_cmt	(0XA0,	"Size in memory image",	0);
	create_qword	(x=0XA0);
	op_hex		(x,	0);
	set_cmt	(0XA8,	"Alignment",	0);
	create_qword	(x=0XA8);
	op_hex		(x,	0);
	set_cmt	(0XB0,	"Type: LOAD",	0);
	update_extra_cmt		(0XB0,	E_PREV + 0,	"; PHT Entry 2");
	create_dword	(x=0XB0);
	op_hex		(x,	0);
	set_cmt	(0XB4,	"Flags",	0);
	create_dword	(x=0XB4);
	op_hex		(x,	0);
	set_cmt	(0XB8,	"File offset",	0);
	create_qword	(x=0XB8);
	op_hex		(x,	0);
	set_cmt	(0XC0,	"Virtual address",	0);
	create_qword	(0XC0);
	set_cmt	(0XC8,	"Physical address",	0);
	create_qword	(x=0XC8);
	op_hex		(x,	0);
	set_cmt	(0XD0,	"Size in file image",	0);
	create_qword	(x=0XD0);
	op_hex		(x,	0);
	set_cmt	(0XD8,	"Size in memory image",	0);
	create_qword	(x=0XD8);
	op_hex		(x,	0);
	set_cmt	(0XE0,	"Alignment",	0);
	create_qword	(x=0XE0);
	op_hex		(x,	0);
	set_cmt	(0XE8,	"Type: LOAD",	0);
	update_extra_cmt		(0XE8,	E_PREV + 0,	"; PHT Entry 3");
	create_dword	(x=0XE8);
	op_hex		(x,	0);
	set_cmt	(0XEC,	"Flags",	0);
	create_dword	(x=0XEC);
	op_hex		(x,	0);
	set_cmt	(0XF0,	"File offset",	0);
	create_qword	(x=0XF0);
	op_hex		(x,	0);
	set_cmt	(0XF8,	"Virtual address",	0);
	create_qword	(x=0XF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X100,	"Physical address",	0);
	create_qword	(x=0X100);
	op_hex		(x,	0);
	set_cmt	(0X108,	"Size in file image",	0);
	create_qword	(x=0X108);
	op_hex		(x,	0);
	set_cmt	(0X110,	"Size in memory image",	0);
	create_qword	(x=0X110);
	op_hex		(x,	0);
	set_cmt	(0X118,	"Alignment",	0);
	create_qword	(x=0X118);
	op_hex		(x,	0);
	set_cmt	(0X120,	"Type: DYNAMIC",	0);
	update_extra_cmt		(0X120,	E_PREV + 0,	"; PHT Entry 4");
	create_dword	(x=0X120);
	op_hex		(x,	0);
	set_cmt	(0X124,	"Flags",	0);
	create_dword	(x=0X124);
	op_hex		(x,	0);
	set_cmt	(0X128,	"File offset",	0);
	create_qword	(x=0X128);
	op_hex		(x,	0);
	set_cmt	(0X130,	"Virtual address",	0);
	create_qword	(x=0X130);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X138,	"Physical address",	0);
	create_qword	(x=0X138);
	op_hex		(x,	0);
	set_cmt	(0X140,	"Size in file image",	0);
	create_qword	(x=0X140);
	op_hex		(x,	0);
	set_cmt	(0X148,	"Size in memory image",	0);
	create_qword	(x=0X148);
	op_hex		(x,	0);
	set_cmt	(0X150,	"Alignment",	0);
	create_qword	(x=0X150);
	op_hex		(x,	0);
	set_cmt	(0X158,	"Type: NOTE",	0);
	update_extra_cmt		(0X158,	E_PREV + 0,	"; PHT Entry 5");
	create_dword	(x=0X158);
	op_hex		(x,	0);
	set_cmt	(0X15C,	"Flags",	0);
	create_dword	(x=0X15C);
	op_hex		(x,	0);
	set_cmt	(0X160,	"File offset",	0);
	create_qword	(x=0X160);
	op_hex		(x,	0);
	set_cmt	(0X168,	"Virtual address",	0);
	create_qword	(x=0X168);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X170,	"Physical address",	0);
	create_qword	(x=0X170);
	op_hex		(x,	0);
	set_cmt	(0X178,	"Size in file image",	0);
	create_qword	(x=0X178);
	op_hex		(x,	0);
	set_cmt	(0X180,	"Size in memory image",	0);
	create_qword	(x=0X180);
	op_hex		(x,	0);
	set_cmt	(0X188,	"Alignment",	0);
	create_qword	(x=0X188);
	op_hex		(x,	0);
	set_cmt	(0X190,	"Type: EH_FRAME",	0);
	update_extra_cmt		(0X190,	E_PREV + 0,	"; PHT Entry 6");
	create_dword	(x=0X190);
	op_hex		(x,	0);
	set_cmt	(0X194,	"Flags",	0);
	create_dword	(x=0X194);
	op_hex		(x,	0);
	set_cmt	(0X198,	"File offset",	0);
	create_qword	(x=0X198);
	op_hex		(x,	0);
	set_cmt	(0X1A0,	"Virtual address",	0);
	create_qword	(x=0X1A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X1A8,	"Physical address",	0);
	create_qword	(x=0X1A8);
	op_hex		(x,	0);
	set_cmt	(0X1B0,	"Size in file image",	0);
	create_qword	(x=0X1B0);
	op_hex		(x,	0);
	set_cmt	(0X1B8,	"Size in memory image",	0);
	create_qword	(x=0X1B8);
	op_hex		(x,	0);
	set_cmt	(0X1C0,	"Alignment",	0);
	create_qword	(x=0X1C0);
	op_hex		(x,	0);
	set_cmt	(0X1C8,	"Type: STACK",	0);
	update_extra_cmt		(0X1C8,	E_PREV + 0,	"; PHT Entry 7");
	create_dword	(x=0X1C8);
	op_hex		(x,	0);
	set_cmt	(0X1CC,	"Flags",	0);
	create_dword	(x=0X1CC);
	op_hex		(x,	0);
	set_cmt	(0X1D0,	"File offset",	0);
	create_qword	(x=0X1D0);
	op_hex		(x,	0);
	set_cmt	(0X1D8,	"Virtual address",	0);
	create_qword	(0X1D8);
	set_cmt	(0X1E0,	"Physical address",	0);
	create_qword	(x=0X1E0);
	op_hex		(x,	0);
	set_cmt	(0X1E8,	"Size in file image",	0);
	create_qword	(x=0X1E8);
	op_hex		(x,	0);
	set_cmt	(0X1F0,	"Size in memory image",	0);
	create_qword	(x=0X1F0);
	op_hex		(x,	0);
	set_cmt	(0X1F8,	"Alignment",	0);
	create_qword	(x=0X1F8);
	op_hex		(x,	0);
	set_cmt	(0X200,	"Type: RO-AFTER",	0);
	update_extra_cmt		(0X200,	E_PREV + 0,	"; PHT Entry 8");
	create_dword	(x=0X200);
	op_hex		(x,	0);
	set_cmt	(0X204,	"Flags",	0);
	create_dword	(x=0X204);
	op_hex		(x,	0);
	set_cmt	(0X208,	"File offset",	0);
	create_qword	(x=0X208);
	op_hex		(x,	0);
	set_cmt	(0X210,	"Virtual address",	0);
	create_qword	(x=0X210);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X218,	"Physical address",	0);
	create_qword	(x=0X218);
	op_hex		(x,	0);
	set_cmt	(0X220,	"Size in file image",	0);
	create_qword	(x=0X220);
	op_hex		(x,	0);
	set_cmt	(0X228,	"Size in memory image",	0);
	create_qword	(x=0X228);
	op_hex		(x,	0);
	set_cmt	(0X230,	"Alignment",	0);
	create_qword	(x=0X230);
	op_hex		(x,	0);
	create_strlit	(0X238,	0X254);
	set_name	(0X238,	"aLib64LdLinuxX8");
	create_dword	(0X254);
	create_qword	(0X258);
	make_array	(0X258,	0X8);
	update_extra_cmt		(0X298,	E_PREV + 0,	"; ELF GNU Hash Table");
	create_dword	(x=0X298);
	op_hex		(x,	0);
	set_name	(0X298,	"elf_gnu_hash_nbuckets");
	create_dword	(x=0X29C);
	op_hex		(x,	0);
	set_name	(0X29C,	"elf_gnu_hash_symbias");
	create_dword	(x=0X2A0);
	op_hex		(x,	0);
	set_name	(0X2A0,	"elf_gnu_hash_bitmask_nwords");
	create_dword	(x=0X2A4);
	op_hex		(x,	0);
	set_name	(0X2A4,	"elf_gnu_hash_shift");
	create_qword	(x=0X2A8);
	op_hex		(x,	0);
	set_name	(0X2A8,	"elf_gnu_hash_indexes");
	create_dword	(x=0X2B0);
	make_array	(x,	0X3);
	op_hex		(x,	0);
	set_name	(0X2B0,	"elf_gnu_hash_bucket");
	create_dword	(x=0X2BC);
	make_array	(x,	0X3);
	op_hex		(x,	0);
	set_name	(0X2BC,	"elf_gnu_hash_chain");
	update_extra_cmt		(0X2C8,	E_PREV + 0,	"; ELF Symbol Table");
	MakeStruct	(0X2C8,	"Elf64_Sym");
	MakeStruct	(0X2F8,	"Elf64_Sym");
	MakeStruct	(0X328,	"Elf64_Sym");
	MakeStruct	(0X358,	"Elf64_Sym");
	MakeStruct	(0X388,	"Elf64_Sym");
	MakeStruct	(0X3B8,	"Elf64_Sym");
	MakeStruct	(0X3E8,	"Elf64_Sym");
	MakeStruct	(0X418,	"Elf64_Sym");
	MakeStruct	(0X448,	"Elf64_Sym");
	MakeStruct	(0X478,	"Elf64_Sym");
	MakeStruct	(0X4A8,	"Elf64_Sym");
	make_array	(0X4A8,	0);
	update_extra_cmt		(0X4C0,	E_PREV + 0,	"; ELF String Table");
	create_byte	(0X4C0);
	create_strlit	(0X4C1,	0X4D0);
	set_name	(0X4C1,	"aLibstdcSo6");
	create_strlit	(0X4D0,	0X4DF);
	set_name	(0X4D0,	"aGmonStart");
	create_strlit	(0X4DF,	0X4FB);
	set_name	(0X4DF,	"aItmDeregistert");
	create_strlit	(0X4FB,	0X515);
	set_name	(0X4FB,	"aItmRegistertmc");
	create_strlit	(0X515,	0X53B);
	set_name	(0X515,	"aZtvn10Cxxabiv1");
	create_strlit	(0X53B,	0X564);
	set_name	(0X53B,	"aZtvn10Cxxabiv1_0");
	create_strlit	(0X564,	0X56A);
	set_name	(0X564,	"aZnwm");
	create_strlit	(0X56A,	0X574);
	set_name	(0X56A,	"aLibcSo6");
	create_strlit	(0X574,	0X579);
	set_name	(0X574,	"aPuts");
	create_strlit	(0X579,	0X58A);
	set_name	(0X579,	"aStackChkFail");
	create_strlit	(0X58A,	0X590);
	set_name	(0X58A,	"aStdin");
	create_strlit	(0X590,	0X597);
	set_name	(0X590,	"aPrintf");
	create_strlit	(0X597,	0X59E);
	set_name	(0X597,	"aMemset");
	create_strlit	(0X59E,	0X5A3);
	set_name	(0X59E,	"aRead");
	create_strlit	(0X5A3,	0X5AA);
	set_name	(0X5A3,	"aStdout");
	create_strlit	(0X5AA,	0X5B1);
	set_name	(0X5AA,	"aMalloc");
	create_strlit	(0X5B1,	0X5B8);
	set_name	(0X5B1,	"aStderr");
	create_strlit	(0X5B8,	0X5C7);
	set_name	(0X5B8,	"aCxaFinalize");
	create_strlit	(0X5C7,	0X5CF);
	set_name	(0X5C7,	"aSetvbuf");
	create_strlit	(0X5CF,	0X5D5);
	set_name	(0X5CF,	"aScanf");
	create_strlit	(0X5D5,	0X5DC);
	set_name	(0X5D5,	"aStrcmp");
	create_strlit	(0X5DC,	0X5EE);
	set_name	(0X5DC,	"aLibcStartMain");
	create_strlit	(0X5EE,	0X5FA);
	set_name	(0X5EE,	"aGlibcxx34");
	create_strlit	(0X5FA,	0X605);
	set_name	(0X5FA,	"aCxxabi13");
	create_strlit	(0X605,	0X60F);
	set_name	(0X605,	"aGlibc24");
	create_strlit	(0X60F,	0X61B);
	set_name	(0X60F,	"aGlibc225");
	create_byte	(0X61B);
	make_array	(0X61B,	0X5);
	create_qword	(0X620);
	make_array	(0X620,	0X11);
	set_cmt	(0X6A8,	"R_X86_64_RELATIVE",	0);
	update_extra_cmt		(0X6A8,	E_PREV + 0,	"; ELF RELA Relocation Table");
	MakeStruct	(0X6A8,	"Elf64_Rela");
	set_cmt	(0X6C0,	"R_X86_64_RELATIVE",	0);
	MakeStruct	(0X6C0,	"Elf64_Rela");
	set_cmt	(0X6D8,	"R_X86_64_RELATIVE",	0);
	MakeStruct	(0X6D8,	"Elf64_Rela");
	set_cmt	(0X6F0,	"R_X86_64_RELATIVE",	0);
	MakeStruct	(0X6F0,	"Elf64_Rela");
	set_cmt	(0X708,	"R_X86_64_RELATIVE",	0);
	MakeStruct	(0X708,	"Elf64_Rela");
	set_cmt	(0X720,	"R_X86_64_RELATIVE",	0);
	MakeStruct	(0X720,	"Elf64_Rela");
	set_cmt	(0X738,	"R_X86_64_RELATIVE",	0);
	MakeStruct	(0X738,	"Elf64_Rela");
	set_cmt	(0X750,	"R_X86_64_RELATIVE",	0);
	MakeStruct	(0X750,	"Elf64_Rela");
	set_cmt	(0X768,	"R_X86_64_RELATIVE",	0);
	MakeStruct	(0X768,	"Elf64_Rela");
	set_cmt	(0X780,	"R_X86_64_RELATIVE",	0);
	MakeStruct	(0X780,	"Elf64_Rela");
	set_cmt	(0X798,	"R_X86_64_RELATIVE",	0);
	MakeStruct	(0X798,	"Elf64_Rela");
	set_cmt	(0X7B0,	"R_X86_64_RELATIVE",	0);
	MakeStruct	(0X7B0,	"Elf64_Rela");
	set_cmt	(0X7C8,	"R_X86_64_RELATIVE",	0);
	MakeStruct	(0X7C8,	"Elf64_Rela");
	set_cmt	(0X7E0,	"R_X86_64_RELATIVE",	0);
	MakeStruct	(0X7E0,	"Elf64_Rela");
	set_cmt	(0X7F8,	"R_X86_64_RELATIVE",	0);
	MakeStruct	(0X7F8,	"Elf64_Rela");
	set_cmt	(0X810,	"R_X86_64_RELATIVE",	0);
	MakeStruct	(0X810,	"Elf64_Rela");
	set_cmt	(0X828,	"R_X86_64_RELATIVE",	0);
	MakeStruct	(0X828,	"Elf64_Rela");
	set_cmt	(0X840,	"R_X86_64_64 _ZTVN10__cxxabiv120__si_class_type_infoE",	0);
	MakeStruct	(0X840,	"Elf64_Rela");
	set_cmt	(0X858,	"R_X86_64_64 _ZTVN10__cxxabiv120__si_class_type_infoE",	0);
	MakeStruct	(0X858,	"Elf64_Rela");
	set_cmt	(0X870,	"R_X86_64_64 _ZTVN10__cxxabiv117__class_type_infoE",	0);
	MakeStruct	(0X870,	"Elf64_Rela");
	set_cmt	(0X888,	"R_X86_64_GLOB_DAT __cxa_finalize",	0);
	MakeStruct	(0X888,	"Elf64_Rela");
	set_cmt	(0X8A0,	"R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable",	0);
	MakeStruct	(0X8A0,	"Elf64_Rela");
	set_cmt	(0X8B8,	"R_X86_64_GLOB_DAT __libc_start_main",	0);
	MakeStruct	(0X8B8,	"Elf64_Rela");
	set_cmt	(0X8D0,	"R_X86_64_GLOB_DAT __gmon_start__",	0);
	MakeStruct	(0X8D0,	"Elf64_Rela");
	set_cmt	(0X8E8,	"R_X86_64_GLOB_DAT _ITM_registerTMCloneTable",	0);
	MakeStruct	(0X8E8,	"Elf64_Rela");
	set_cmt	(0X900,	"R_X86_64_COPY stdout",	0);
	MakeStruct	(0X900,	"Elf64_Rela");
	set_cmt	(0X918,	"R_X86_64_COPY stdin",	0);
	MakeStruct	(0X918,	"Elf64_Rela");
	set_cmt	(0X930,	"R_X86_64_COPY stderr",	0);
	MakeStruct	(0X930,	"Elf64_Rela");
	set_cmt	(0X948,	"R_X86_64_JUMP_SLOT setvbuf",	0);
	update_extra_cmt		(0X948,	E_PREV + 0,	"; ELF JMPREL Relocation Table");
	MakeStruct	(0X948,	"Elf64_Rela");
	set_cmt	(0X960,	"R_X86_64_JUMP_SLOT printf",	0);
	MakeStruct	(0X960,	"Elf64_Rela");
	set_cmt	(0X978,	"R_X86_64_JUMP_SLOT memset",	0);
	MakeStruct	(0X978,	"Elf64_Rela");
	set_cmt	(0X990,	"R_X86_64_JUMP_SLOT _Znwm",	0);
	MakeStruct	(0X990,	"Elf64_Rela");
	set_cmt	(0X9A8,	"R_X86_64_JUMP_SLOT __stack_chk_fail",	0);
	MakeStruct	(0X9A8,	"Elf64_Rela");
	set_cmt	(0X9C0,	"R_X86_64_JUMP_SLOT scanf",	0);
	MakeStruct	(0X9C0,	"Elf64_Rela");
	set_cmt	(0X9D8,	"R_X86_64_JUMP_SLOT malloc",	0);
	MakeStruct	(0X9D8,	"Elf64_Rela");
	set_cmt	(0X9F0,	"R_X86_64_JUMP_SLOT strcmp",	0);
	MakeStruct	(0X9F0,	"Elf64_Rela");
	set_cmt	(0XA08,	"R_X86_64_JUMP_SLOT read",	0);
	MakeStruct	(0XA08,	"Elf64_Rela");
	set_cmt	(0XA20,	"R_X86_64_JUMP_SLOT puts",	0);
	MakeStruct	(0XA20,	"Elf64_Rela");
	create_insn	(x=0XA38);
	op_hex		(x,	1);
	set_name	(0XA38,	".init_proc");
	create_insn	(x=0XA4A);
	op_hex		(x,	1);
	create_insn	(0XA50);
	make_array	(0XA5C,	0X4);
	create_insn	(0XA60);
	set_name	(0XA60,	".setvbuf");
	create_insn	(0XA66);
	create_insn	(0XA70);
	set_name	(0XA70,	".printf");
	create_insn	(0XA76);
	create_insn	(0XA80);
	set_name	(0XA80,	".memset");
	create_insn	(0XA86);
	create_insn	(0XA90);
	set_name	(0XA90,	"._Znwm");
	create_insn	(0XA96);
	create_insn	(0XAA0);
	set_name	(0XAA0,	".__stack_chk_fail");
	create_insn	(0XAA6);
	create_insn	(0XAB0);
	set_name	(0XAB0,	".scanf");
	create_insn	(0XAB6);
	create_insn	(0XAC0);
	set_name	(0XAC0,	".malloc");
	create_insn	(0XAC6);
	create_insn	(0XAD0);
	set_name	(0XAD0,	".strcmp");
	create_insn	(0XAD6);
	create_insn	(0XAE0);
	set_name	(0XAE0,	".read");
	create_insn	(0XAE6);
	create_insn	(0XAF0);
	set_name	(0XAF0,	".puts");
	create_insn	(0XAF6);
	create_insn	(0XB00);
	set_name	(0XB00,	"__cxa_finalize");
	make_array	(0XB06,	0X2);
	make_array	(0XB08,	0X8);
	create_insn	(0XB10);
	set_name	(0XB10,	"start");
	set_cmt	(0XB12,	"rtld_fini",	0);
	set_cmt	(0XB15,	"argc",	0);
	set_cmt	(0XB16,	"ubp_av",	0);
	create_insn	(x=0XB19);
	op_hex		(x,	1);
	set_cmt	(0XB1E,	"stack_end",	0);
	set_cmt	(0XB1F,	"fini",	0);
	create_insn	(x=0XB1F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XB26,	"init",	0);
	create_insn	(x=0XB26);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XB2D,	"main",	0);
	create_insn	(x=0XB2D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0XB3B,	0X5);
	create_insn	(x=0XB40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0XB66,	0XA);
	create_insn	(0XB70);
	make_array	(0XB72,	0XE);
	create_insn	(x=0XB80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB87);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB95);
	op_hex		(x,	1);
	create_insn	(x=0XB9C);
	op_hex		(x,	1);
	create_insn	(x=0XBA3);
	op_hex		(x,	1);
	make_array	(0XBB7,	0X9);
	create_insn	(0XBC0);
	make_array	(0XBC2,	0XE);
	create_insn	(0XBD0);
	make_array	(0XC01,	0X7);
	create_insn	(0XC08);
	make_array	(0XC0A,	0X6);
	create_insn	(0XC10);
	create_insn	(0XC1A);
	set_name	(0XC1A,	"puts_content");
	create_insn	(x=0XC1E);
	op_hex		(x,	1);
	create_insn	(x=0XC22);
	op_stkvar	(x,	0);
	create_insn	(x=0XC26);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC37);
	op_stkvar	(x,	1);
	set_cmt	(0XC3E,	"s",	0);
	create_insn	(0XC4A);
	create_insn	(x=0XC4E);
	op_hex		(x,	1);
	create_insn	(x=0XC52);
	op_stkvar	(x,	0);
	create_insn	(x=0XC56);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC67);
	op_stkvar	(x,	1);
	set_cmt	(0XC6E,	"nbytes",	0);
	create_insn	(x=0XC70);
	op_stkvar	(x,	1);
	set_cmt	(0XC77,	"buf",	0);
	set_cmt	(0XC7A,	"fd",	0);
	create_insn	(0XC88);
	set_name	(0XC88,	"update_hash");
	create_insn	(x=0XC8C);
	op_hex		(x,	1);
	create_insn	(x=0XC90);
	op_stkvar	(x,	0);
	create_insn	(x=0XC9D);
	op_stkvar	(x,	0);
	create_insn	(x=0XCA3);
	op_stkvar	(x,	1);
	set_cmt	(0XCA7,	"n",	0);
	set_cmt	(0XCAC,	"c",	0);
	set_cmt	(0XCB1,	"s",	0);
	create_insn	(x=0XCB9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCCA);
	op_stkvar	(x,	1);
	create_insn	(x=0XCD1);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCF3);
	op_stkvar	(x,	1);
	set_cmt	(0XCF7,	"nbytes",	0);
	set_cmt	(0XCFC,	"buf",	0);
	set_cmt	(0XCFF,	"fd",	0);
	create_insn	(x=0XD09);
	op_stkvar	(x,	0);
	create_insn	(x=0XD0C);
	op_stkvar	(x,	1);
	create_insn	(x=0XD13);
	op_hex		(x,	1);
	create_insn	(x=0XD28);
	op_hex		(x,	1);
	create_insn	(x=0XD2F);
	op_dec		(x,	1);
	create_insn	(x=0XD36);
	op_stkvar	(x,	0);
	create_insn	(x=0XD39);
	op_stkvar	(x,	1);
	create_insn	(x=0XD3E);
	op_hex		(x,	1);
	create_insn	(x=0XD47);
	op_stkvar	(x,	0);
	create_insn	(x=0XD4A);
	op_stkvar	(x,	0);
	create_insn	(x=0XD51);
	op_stkvar	(x,	1);
	create_insn	(x=0XD54);
	op_stkvar	(x,	1);
	create_insn	(x=0XD59);
	op_stkvar	(x,	1);
	create_insn	(x=0XD5C);
	op_stkvar	(x,	1);
	create_insn	(x=0XD66);
	op_stkvar	(x,	0);
	create_insn	(x=0XD6D);
	op_stkvar	(x,	1);
	create_insn	(x=0XD70);
	op_stkvar	(x,	1);
	create_insn	(x=0XD76);
	op_stkvar	(x,	1);
	create_insn	(x=0XD7B);
	op_stkvar	(x,	1);
	create_insn	(x=0XD80);
	op_stkvar	(x,	1);
	create_insn	(x=0XD8B);
	op_stkvar	(x,	0);
	create_insn	(0XD91);
	create_insn	(x=0XD92);
	op_stkvar	(x,	1);
	create_insn	(0XDA6);
	create_insn	(0XDA8);
	set_name	(0XDA8,	"str_show");
	create_insn	(x=0XDAC);
	op_hex		(x,	1);
	create_insn	(x=0XDB0);
	op_stkvar	(x,	0);
	create_insn	(x=0XDBD);
	op_stkvar	(x,	0);
	create_insn	(x=0XDC3);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDD4);
	op_stkvar	(x,	1);
	create_insn	(x=0XDDB);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDEC);
	op_stkvar	(x,	1);
	create_insn	(x=0XDF4);
	op_stkvar	(x,	0);
	create_insn	(x=0XDF8);
	op_stkvar	(x,	1);
	create_insn	(x=0XDFF);
	op_stkvar	(x,	1);
	create_insn	(x=0XE05);
	op_stkvar	(x,	1);
	create_insn	(x=0XE12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE20);
	op_stkvar	(x,	1);
	create_insn	(x=0XE2D);
	op_stkvar	(x,	1);
	create_insn	(x=0XE3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE4A);
	op_stkvar	(x,	1);
	create_insn	(x=0XE57);
	op_stkvar	(x,	1);
	create_insn	(x=0XE69);
	op_stkvar	(x,	1);
	create_insn	(0XE7D);
	create_insn	(0XE80);
	set_name	(0XE80,	"str_set");
	create_insn	(x=0XE85);
	op_hex		(x,	1);
	create_insn	(x=0XE89);
	op_stkvar	(x,	0);
	create_insn	(x=0XE96);
	op_stkvar	(x,	0);
	create_insn	(x=0XE9C);
	op_stkvar	(x,	0);
	create_insn	(x=0XEA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XEB5);
	op_stkvar	(x,	1);
	create_insn	(x=0XEBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XECD);
	op_stkvar	(x,	1);
	create_insn	(x=0XED5);
	op_stkvar	(x,	0);
	create_insn	(x=0XED9);
	op_stkvar	(x,	1);
	create_insn	(x=0XEE0);
	op_stkvar	(x,	1);
	create_insn	(x=0XEE6);
	op_stkvar	(x,	1);
	create_insn	(x=0XEF3);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF04);
	op_stkvar	(x,	1);
	create_insn	(x=0XF11);
	op_stkvar	(x,	1);
	create_insn	(x=0XF24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF35);
	op_stkvar	(x,	1);
	create_insn	(x=0XF3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF4D);
	op_stkvar	(x,	1);
	create_insn	(x=0XF57);
	op_stkvar	(x,	1);
	create_insn	(x=0XF5E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XF6C,	"unsigned __int64",	0);
	create_insn	(0XF6C);
	create_insn	(x=0XF79);
	op_stkvar	(x,	1);
	set_cmt	(0XF7C,	"length",	0);
	set_cmt	(0XF7E,	"ptr",	0);
	create_insn	(x=0XF86);
	op_stkvar	(x,	0);
	create_insn	(x=0XF8A);
	op_stkvar	(x,	1);
	create_insn	(x=0XF96);
	op_stkvar	(x,	1);
	create_insn	(x=0XFA3);
	op_stkvar	(x,	1);
	create_insn	(x=0XFAA);
	op_stkvar	(x,	1);
	create_insn	(x=0XFB3);
	op_stkvar	(x,	1);
	create_insn	(x=0XFC0);
	op_stkvar	(x,	1);
	create_insn	(x=0XFD2);
	op_stkvar	(x,	1);
	create_insn	(x=0XFE6);
	op_hex		(x,	1);
	create_insn	(0XFEE);
	set_name	(0XFEE,	"int_set");
	create_insn	(x=0XFF2);
	op_hex		(x,	1);
	create_insn	(x=0XFF6);
	op_stkvar	(x,	0);
	create_insn	(x=0X1003);
	op_stkvar	(x,	0);
	create_insn	(x=0X1009);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X101A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1021);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1032);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1043);
	op_stkvar	(x,	1);
	create_insn	(x=0X104A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X105B);
	op_stkvar	(x,	1);
	create_insn	(x=0X1063);
	op_stkvar	(x,	0);
	create_insn	(x=0X1067);
	op_stkvar	(x,	1);
	create_insn	(x=0X106E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1074);
	op_stkvar	(x,	1);
	create_insn	(x=0X1081);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1094);
	op_stkvar	(x,	1);
	create_insn	(x=0X1098);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A5);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AF);
	op_stkvar	(x,	1);
	create_insn	(0X10C3);
	create_insn	(0X10C6);
	set_name	(0X10C6,	"int_show");
	create_insn	(x=0X10CA);
	op_hex		(x,	1);
	create_insn	(x=0X10CE);
	op_stkvar	(x,	0);
	create_insn	(x=0X10DB);
	op_stkvar	(x,	0);
	create_insn	(x=0X10E1);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1112);
	op_stkvar	(x,	0);
	create_insn	(x=0X1116);
	op_stkvar	(x,	1);
	create_insn	(x=0X111D);
	op_stkvar	(x,	1);
	create_insn	(x=0X1123);
	op_stkvar	(x,	1);
	create_insn	(x=0X1130);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1143);
	op_stkvar	(x,	1);
	create_insn	(x=0X1150);
	op_stkvar	(x,	1);
	create_insn	(x=0X115D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X116E);
	op_stkvar	(x,	1);
	create_insn	(0X1182);
	create_insn	(0X1184);
	set_name	(0X1184,	"new_array");
	create_insn	(x=0X1189);
	op_hex		(x,	1);
	create_insn	(x=0X1196);
	op_stkvar	(x,	0);
	create_insn	(x=0X11A7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11C9);
	op_stkvar	(x,	1);
	create_insn	(x=0X11D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11E1);
	op_stkvar	(x,	1);
	set_cmt	(0X11E9,	"unsigned __int64",	0);
	set_cmt	(0X121D,	"ptr",	0);
	create_insn	(x=0X123E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X124B,	"unsigned __int64",	0);
	create_insn	(0X124B);
	set_cmt	(0X127F,	"a1",	0);
	create_insn	(x=0X12A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12AB);
	op_stkvar	(x,	1);
	create_insn	(x=0X12BF);
	op_hex		(x,	1);
	create_insn	(0X12C6);
	create_insn	(x=0X12CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1306);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X131A);
	set_cmt	(0X1325,	"n",	0);
	set_cmt	(0X132A,	"modes",	0);
	set_cmt	(0X132F,	"buf",	0);
	set_cmt	(0X1334,	"stream",	0);
	set_cmt	(0X1343,	"n",	0);
	set_cmt	(0X1348,	"modes",	0);
	set_cmt	(0X134D,	"buf",	0);
	set_cmt	(0X1352,	"stream",	0);
	set_cmt	(0X1361,	"n",	0);
	set_cmt	(0X1366,	"modes",	0);
	set_cmt	(0X136B,	"buf",	0);
	set_cmt	(0X1370,	"stream",	0);
	create_insn	(0X137B);
	set_name	(0X137B,	"main");
	create_insn	(x=0X137F);
	op_hex		(x,	1);
	create_insn	(x=0X138C);
	op_stkvar	(x,	0);
	create_insn	(x=0X139C);
	op_stkvar	(x,	1);
	create_insn	(x=0X13A3);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X13C5);
	op_stkvar	(x,	1);
	create_insn	(x=0X13CD);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X13F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1407);
	op_stkvar	(x,	1);
	set_cmt	(0X140B,	"nbytes",	0);
	set_cmt	(0X1410,	"buf",	0);
	set_cmt	(0X1413,	"fd",	0);
	create_insn	(x=0X141D);
	op_stkvar	(x,	0);
	create_insn	(x=0X142A);
	op_stkvar	(x,	0);
	create_insn	(x=0X142F);
	op_stkvar	(x,	1);
	create_insn	(x=0X143A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1450);
	op_stkvar	(x,	1);
	set_cmt	(0X1454,	"s2",	0);
	set_cmt	(0X1457,	"s1",	0);
	create_insn	(x=0X1468);
	op_stkvar	(x,	0);
	create_insn	(0X146E);
	create_insn	(x=0X1475);
	op_stkvar	(x,	0);
	create_insn	(x=0X147A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1488);
	op_stkvar	(x,	1);
	create_insn	(x=0X1493);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X149E);
	op_stkvar	(x,	0);
	create_insn	(x=0X14A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X14B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X14BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X14C9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14D7);
	op_stkvar	(x,	1);
	create_insn	(x=0X14E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X14F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1502);
	create_insn	(0X1507);
	create_insn	(0X150A);
	create_insn	(x=0X150E);
	op_hex		(x,	1);
	create_insn	(x=0X1512);
	op_stkvar	(x,	0);
	create_insn	(x=0X1516);
	op_stkvar	(x,	0);
	create_insn	(x=0X1519);
	op_stkvar	(x,	1);
	create_insn	(x=0X151C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1523);
	op_stkvar	(x,	1);
	set_cmt	(0X1528,	"size",	0);
	create_insn	(x=0X1533);
	op_stkvar	(x,	1);
	create_insn	(0X153E);
	create_insn	(x=0X1542);
	op_stkvar	(x,	0);
	create_insn	(0X154A);
	create_insn	(x=0X154E);
	op_stkvar	(x,	0);
	create_insn	(0X1556);
	set_name	(0X1556,	"return_hash");
	create_insn	(x=0X155A);
	op_stkvar	(x,	0);
	create_insn	(x=0X155E);
	op_stkvar	(x,	1);
	create_insn	(0X1568);
	create_insn	(x=0X156C);
	op_hex		(x,	1);
	create_insn	(x=0X1570);
	op_stkvar	(x,	0);
	create_insn	(x=0X1574);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X157B);
	op_stkvar	(x,	1);
	set_cmt	(0X1582,	"size",	0);
	create_insn	(x=0X158F);
	op_stkvar	(x,	1);
	create_insn	(x=0X1597);
	op_stkvar	(x,	1);
	set_cmt	(0X159F,	"n",	0);
	set_cmt	(0X15A4,	"c",	0);
	set_cmt	(0X15A9,	"s",	0);
	create_insn	(x=0X15B1);
	op_stkvar	(x,	1);
	create_insn	(x=0X15C5);
	op_stkvar	(x,	1);
	create_insn	(0X15D0);
	set_name	(0X15D0,	"int_arr");
	create_insn	(x=0X15D4);
	op_hex		(x,	1);
	create_insn	(x=0X15D8);
	op_stkvar	(x,	0);
	create_insn	(x=0X15DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X15E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15EF);
	op_stkvar	(x,	1);
	create_insn	(0X15FA);
	set_name	(0X15FA,	"str_arr");
	create_insn	(x=0X15FE);
	op_hex		(x,	1);
	create_insn	(x=0X1602);
	op_stkvar	(x,	0);
	create_insn	(x=0X1606);
	op_stkvar	(x,	1);
	set_cmt	(0X160A,	"a1",	0);
	create_insn	(x=0X1612);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1619);
	op_stkvar	(x,	1);
	make_array	(0X1623,	0XD);
	create_insn	(0X1630);
	set_name	(0X1630,	"init");
	create_insn	(x=0X163B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1643);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1654);
	op_hex		(x,	1);
	create_insn	(x=0X1658);
	op_hex		(x,	1);
	create_insn	(x=0X1686);
	op_hex		(x,	1);
	make_array	(0X1695,	0XB);
	create_insn	(0X16A0);
	set_name	(0X16A0,	"fini");
	make_array	(0X16A2,	0X2);
	create_insn	(x=0X16A4);
	op_hex		(x,	1);
	set_name	(0X16A4,	".term_proc");
	create_insn	(x=0X16A8);
	op_hex		(x,	1);
	make_array	(0X16AD,	0X3);
	create_strlit	(0X16B8,	0X16C1);
	set_name	(0X16B8,	"format");
	create_strlit	(0X16C1,	0X16D5);
	set_name	(0X16C1,	"aInputYourConte");
	create_strlit	(0X16D5,	0X16E0);
	set_name	(0X16D5,	"aInputIdx");
	create_strlit	(0X16E0,	0X16E3);
	set_name	(0X16E0,	"aU");
	create_strlit	(0X16E3,	0X16EF);
	set_name	(0X16E3,	"aInputHash");
	create_strlit	(0X16EF,	0X16F2);
	set_name	(0X16EF,	"aD");
	create_strlit	(0X16F2,	0X1700);
	set_name	(0X16F2,	"s");
	create_strlit	(0X1700,	0X170D);
	set_name	(0X1700,	"aNoSuchObj");
	create_strlit	(0X170D,	0X1727);
	set_name	(0X170D,	"aInputTheLenOfT");
	create_strlit	(0X1727,	0X1737);
	set_name	(0X1727,	"aInvalidLength");
	create_strlit	(0X1737,	0X1742);
	set_name	(0X1737,	"aInputVal");
	create_strlit	(0X1742,	0X1746);
	set_name	(0X1742,	"aLx");
	make_array	(0X1746,	0X2);
	create_strlit	(0X1748,	0X1767);
	set_name	(0X1748,	"aTheValueInTheA");
	create_strlit	(0X1767,	0X1777);
	set_name	(0X1767,	"aTooManyArray");
	create_strlit	(0X1778,	0X17C0);
	set_name	(0X1778,	"aWhatKindOfArra");
	create_strlit	(0X17C0,	0X17CD);
	set_name	(0X17C0,	"a0NewArray");
	create_strlit	(0X17CD,	0X17DD);
	set_name	(0X17CD,	"a1ShowElement");
	create_strlit	(0X17DD,	0X17EC);
	set_name	(0X17DD,	"a2SetElement");
	create_strlit	(0X17EC,	0X17FB);
	set_name	(0X17EC,	"a3UpdateHash");
	create_strlit	(0X17FB,	0X1803);
	set_name	(0X17FB,	"a4Exit");
	create_strlit	(0X1803,	0X1810);
	set_name	(0X1803,	"aYourChoice");
	create_strlit	(0X1810,	0X1815);
	set_name	(0X1810,	"aBye");
	create_strlit	(0X1815,	0X1827);
	set_name	(0X1815,	"aInputArrayHash");
	create_strlit	(0X1827,	0X1836);
	set_name	(0X1827,	"aNoSuchArray");
	create_strlit	(0X1836,	0X1846);
	set_name	(0X1836,	"aNoSuchOption");
	make_array	(0X1846,	0X2);
	set_cmt	(0X1848,	"type descriptor name\ntype descriptor name",	1);
	create_strlit	(0X1848,	0X1852);
	set_name	(0X1848,	"_ZTS8VarArray");
	make_array	(0X1852,	0X6);
	set_cmt	(0X1858,	"type descriptor name",	1);
	create_strlit	(0X1858,	0X1863);
	set_name	(0X1858,	"_ZTS9LongArray");
	make_array	(0X1863,	0X5);
	set_cmt	(0X1868,	"type descriptor name\ntype descriptor name",	1);
	create_strlit	(0X1868,	0X1873);
	set_name	(0X1868,	"_ZTS9BaseArray");
	update_extra_cmt		(0X201CC0,	E_PREV + 0,	"; ELF Initialization Function Table");
	create_qword	(x=0X201CC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	update_extra_cmt		(0X201CC8,	E_PREV + 0,	"; ELF Termination Function Table");
	create_qword	(x=0X201CC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X201CD0,	"offset to this",	0);
	create_qword	(x=0X201CD0);
	op_dec		(x,	0);
	set_name	(0X201CD0,	"_ZTV9LongArray");
	create_qword	(x=0X201CD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X201CE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X201CE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X201CF0,	"offset to this\noffset to this",	0);
	create_qword	(x=0X201CF0);
	op_dec		(x,	0);
	set_name	(0X201CF0,	"_ZTV8VarArray");
	create_qword	(x=0X201CF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X201D00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X201D08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X201D10,	"offset to this\noffset to this",	0);
	create_qword	(x=0X201D10);
	op_dec		(x,	0);
	set_name	(0X201D10,	"_ZTV9BaseArray");
	create_qword	(x=0X201D18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X201D20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X201D28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X201D30,	"reference to RTTI's type class\nreference to RTTI's type class",	0);
	update_extra_cmt		(0X201D30,	E_PREV + 0,	"; public \x01\b\x01(0000000000201D30VarArray\x02\b :");
	update_extra_cmt		(0X201D30,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000000000201D60BaseArray\x02\b");
	update_extra_cmt		(0X201D30,	E_PREV + 2,	"; public \x01\b\x01(0000000000201D30VarArray\x02\b :");
	update_extra_cmt		(0X201D30,	E_PREV + 3,	";   public /* offset 0x0 */ \x01\b\x01(0000000000201D60BaseArray\x02\b");
	create_qword	(x=0X201D30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X201D30,	"_ZTI8VarArray");
	set_cmt	(0X201D38,	"offset to this\nreference to type's name\noffset to this\nreference to type's name",	0);
	create_qword	(x=0X201D38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X201D40,	"reference to parent's type name\nreference to parent's type name",	0);
	create_qword	(x=0X201D40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X201D48,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X201D48,	E_PREV + 0,	"; public \x01\b\x01(0000000000201D48LongArray\x02\b :");
	update_extra_cmt		(0X201D48,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000000000201D60BaseArray\x02\b");
	create_qword	(x=0X201D48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X201D48,	"_ZTI9LongArray");
	set_cmt	(0X201D50,	"offset to this\nreference to type's name\noffset to this",	0);
	create_qword	(x=0X201D50);
	op_dec		(x,	0);
	set_cmt	(0X201D58,	"reference to parent's type name",	0);
	create_qword	(x=0X201D58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X201D60,	"reference to RTTI's type class\nreference to RTTI's type class",	0);
	update_extra_cmt		(0X201D60,	E_PREV + 0,	"; public \x01\b\x01(0000000000201D60BaseArray\x02\b");
	update_extra_cmt		(0X201D60,	E_PREV + 1,	"; public \x01\b\x01(0000000000201D60BaseArray\x02\b");
	create_qword	(x=0X201D60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X201D60,	"_ZTI9BaseArray");
	set_cmt	(0X201D68,	"reference to type's name\nreference to type's name",	0);
	create_qword	(x=0X201D68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X201D70,	"DT_NEEDED libstdc++.so.6",	0);
	update_extra_cmt		(0X201D70,	E_PREV + 0,	"; ELF Dynamic Information");
	MakeStruct	(0X201D70,	"Elf64_Dyn");
	set_cmt	(0X201D80,	"DT_NEEDED libc.so.6",	0);
	MakeStruct	(0X201D80,	"Elf64_Dyn");
	set_cmt	(0X201D90,	"DT_INIT ",	0);
	MakeStruct	(0X201D90,	"Elf64_Dyn");
	set_cmt	(0X201DA0,	"DT_FINI ",	0);
	MakeStruct	(0X201DA0,	"Elf64_Dyn");
	set_cmt	(0X201DB0,	"DT_INIT_ARRAY ",	0);
	MakeStruct	(0X201DB0,	"Elf64_Dyn");
	set_cmt	(0X201DC0,	"DT_INIT_ARRAYSZ ",	0);
	MakeStruct	(0X201DC0,	"Elf64_Dyn");
	set_cmt	(0X201DD0,	"DT_FINI_ARRAY ",	0);
	MakeStruct	(0X201DD0,	"Elf64_Dyn");
	set_cmt	(0X201DE0,	"DT_FINI_ARRAYSZ ",	0);
	MakeStruct	(0X201DE0,	"Elf64_Dyn");
	set_cmt	(0X201DF0,	"DT_GNU_HASH ",	0);
	MakeStruct	(0X201DF0,	"Elf64_Dyn");
	set_cmt	(0X201E00,	"DT_STRTAB ",	0);
	MakeStruct	(0X201E00,	"Elf64_Dyn");
	set_cmt	(0X201E10,	"DT_SYMTAB ",	0);
	MakeStruct	(0X201E10,	"Elf64_Dyn");
	set_cmt	(0X201E20,	"DT_STRSZ ",	0);
	MakeStruct	(0X201E20,	"Elf64_Dyn");
	set_cmt	(0X201E30,	"DT_SYMENT ",	0);
	MakeStruct	(0X201E30,	"Elf64_Dyn");
	set_cmt	(0X201E40,	"DT_DEBUG ",	0);
	MakeStruct	(0X201E40,	"Elf64_Dyn");
	set_cmt	(0X201E50,	"DT_PLTGOT ",	0);
	MakeStruct	(0X201E50,	"Elf64_Dyn");
	set_cmt	(0X201E60,	"DT_PLTRELSZ ",	0);
	MakeStruct	(0X201E60,	"Elf64_Dyn");
	set_cmt	(0X201E70,	"DT_PLTREL ",	0);
	MakeStruct	(0X201E70,	"Elf64_Dyn");
	set_cmt	(0X201E80,	"DT_JMPREL ",	0);
	MakeStruct	(0X201E80,	"Elf64_Dyn");
	set_cmt	(0X201E90,	"DT_RELA ",	0);
	MakeStruct	(0X201E90,	"Elf64_Dyn");
	set_cmt	(0X201EA0,	"DT_RELASZ ",	0);
	MakeStruct	(0X201EA0,	"Elf64_Dyn");
	set_cmt	(0X201EB0,	"DT_RELAENT ",	0);
	MakeStruct	(0X201EB0,	"Elf64_Dyn");
	set_cmt	(0X201EC0,	"DT_FLAGS ",	0);
	MakeStruct	(0X201EC0,	"Elf64_Dyn");
	set_cmt	(0X201ED0,	"DT_FLAGS_1 ",	0);
	MakeStruct	(0X201ED0,	"Elf64_Dyn");
	set_cmt	(0X201EE0,	"DT_VERNEED ",	0);
	MakeStruct	(0X201EE0,	"Elf64_Dyn");
	set_cmt	(0X201EF0,	"DT_VERNEEDNUM ",	0);
	MakeStruct	(0X201EF0,	"Elf64_Dyn");
	set_cmt	(0X201F00,	"DT_VERSYM ",	0);
	MakeStruct	(0X201F00,	"Elf64_Dyn");
	set_cmt	(0X201F10,	"DT_RELACOUNT ",	0);
	MakeStruct	(0X201F10,	"Elf64_Dyn");
	set_cmt	(0X201F20,	"DT_NULL ",	0);
	MakeStruct	(0X201F20,	"Elf64_Dyn");
	create_qword	(x=0X201F70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X201F78);
	create_qword	(0X201F80);
	create_qword	(x=0X201F88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X201F88,	"setvbuf_ptr");
	create_qword	(x=0X201F90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X201F90,	"printf_ptr");
	create_qword	(x=0X201F98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X201F98,	"memset_ptr");
	create_qword	(x=0X201FA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X201FA0,	"_Znwm_ptr");
	create_qword	(x=0X201FA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X201FA8,	"__stack_chk_fail_ptr");
	create_qword	(x=0X201FB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X201FB0,	"scanf_ptr");
	create_qword	(x=0X201FB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X201FB8,	"malloc_ptr");
	create_qword	(x=0X201FC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X201FC0,	"strcmp_ptr");
	create_qword	(x=0X201FC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X201FC8,	"read_ptr");
	create_qword	(x=0X201FD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X201FD0,	"puts_ptr");
	create_qword	(x=0X201FD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X201FD8,	"__cxa_finalize_ptr");
	create_qword	(x=0X201FE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X201FE0,	"_ITM_deregisterTMCloneTable_ptr");
	create_qword	(x=0X201FE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X201FE8,	"__libc_start_main_ptr");
	create_qword	(x=0X201FF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X201FF0,	"__gmon_start___ptr");
	create_qword	(x=0X201FF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X201FF8,	"_ITM_registerTMCloneTable_ptr");
	create_qword	(x=0X202008);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X202020,	"Copy of shared data",	0);
	create_qword	(0X202020);
	set_name	(0X202020,	"stdout");
	make_array	(0X202028,	0X8);
	set_cmt	(0X202030,	"Copy of shared data",	0);
	create_qword	(0X202030);
	set_name	(0X202030,	"stdin");
	make_array	(0X202038,	0X8);
	set_cmt	(0X202040,	"Copy of shared data",	0);
	create_qword	(0X202040);
	set_name	(0X202040,	"stderr");
	create_byte	(0X202048);
	make_array	(0X202049,	0X17);
	create_qword	(0X202060);
	make_array	(0X202060,	0X10);
	set_name	(0X202060,	"Node_arr");
	create_dword	(0X2020E0);
	set_name	(0X2020E0,	"count");
	make_array	(0X2020E4,	0X4);
	create_insn	(0X2020E8);
	set_name	(0X2020E8,	"setvbuf");
	create_insn	(0X2020F0);
	set_name	(0X2020F0,	"printf");
	create_insn	(0X2020F8);
	set_name	(0X2020F8,	"__imp___cxa_finalize");
	create_insn	(0X202100);
	set_name	(0X202100,	"memset");
	set_name	(0X202108,	"_ZTVN10__cxxabiv117__class_type_infoE");
	create_insn	(0X202110);
	set_name	(0X202110,	"_Znwm");
	create_insn	(0X202118);
	set_name	(0X202118,	"__stack_chk_fail");
	set_name	(0X202120,	"_ZTVN10__cxxabiv120__si_class_type_infoE");
	create_insn	(0X202128);
	set_name	(0X202128,	"scanf");
	create_insn	(0X202130);
	set_name	(0X202130,	"malloc");
	create_insn	(0X202138);
	set_name	(0X202138,	"strcmp");
	create_insn	(0X202140);
	set_name	(0X202140,	"read");
	create_insn	(0X202148);
	set_name	(0X202148,	"puts");
	create_insn	(0X202150);
	set_name	(0X202150,	"__libc_start_main");
	set_name	(0X202158,	"_ITM_deregisterTMCloneTable");
	create_insn	(0X202160);
	set_name	(0X202160,	"__gmon_start__");
	set_name	(0X202168,	"_ITM_registerTMCloneTable");
}

static Functions_0(void) {

	add_func    (0XA38,0XA4F);
	set_func_flags(0XA38,0x4400);
	set_frame_size(0XA38, 0X8, 0, 0);
	add_func    (0XA50,0XA5C);
	set_func_flags(0XA50,0x400);
	add_func    (0XA60,0XA66);
	set_func_flags(0XA60,0x4c0);
	SetType(0XA60, "int setvbuf(FILE *stream, char *buf, int modes, size_t n);");
	add_func    (0XA70,0XA76);
	set_func_flags(0XA70,0x4c0);
	SetType(0XA70, "int printf(const char *format, ...);");
	add_func    (0XA80,0XA86);
	set_func_flags(0XA80,0x4c0);
	SetType(0XA80, "void *memset(void *s, int c, size_t n);");
	add_func    (0XA90,0XA96);
	set_func_flags(0XA90,0x4c0);
	SetType(0XA90, "_QWORD __cdecl operator_new(unsigned __int64);");
	add_func    (0XAA0,0XAA6);
	set_func_flags(0XAA0,0x4c1);
	add_func    (0XAB0,0XAB6);
	set_func_flags(0XAB0,0x4c0);
	SetType(0XAB0, "int scanf(const char *format, ...);");
	add_func    (0XAC0,0XAC6);
	set_func_flags(0XAC0,0x4c0);
	SetType(0XAC0, "void *malloc(size_t size);");
	add_func    (0XAD0,0XAD6);
	set_func_flags(0XAD0,0x4c0);
	SetType(0XAD0, "int strcmp(const char *s1, const char *s2);");
	add_func    (0XAE0,0XAE6);
	set_func_flags(0XAE0,0x4c0);
	SetType(0XAE0, "ssize_t read(int fd, void *buf, size_t nbytes);");
	add_func    (0XAF0,0XAF6);
	set_func_flags(0XAF0,0x4c0);
	SetType(0XAF0, "int puts(const char *s);");
	add_func    (0XB00,0XB06);
	set_func_flags(0XB00,0x4c0);
	add_func    (0XB10,0XB3B);
	set_func_flags(0XB10,0x401);
	add_func    (0XB40,0XB72);
	set_func_flags(0XB40,0x4410);
	set_frame_size(0XB40, 0, 8, 0);
	add_func    (0XB80,0XBC2);
	set_func_flags(0XB80,0x4410);
	set_frame_size(0XB80, 0, 8, 0);
	add_func    (0XBD0,0XC0A);
	set_func_flags(0XBD0,0x4400);
	set_frame_size(0XBD0, 0, 0, 0);
	add_func    (0XC10,0XC1A);
	set_func_flags(0XC10,0x410);
	set_frame_size(0XC10, 0, 8, 0);
	add_func    (0XC1A,0XC49);
	set_func_flags(0XC1A,0x4410);
	set_frame_size(0XC1A, 0X10, 8, 0);
	add_func    (0XC4A,0XC87);
	set_func_flags(0XC4A,0x4410);
	set_frame_size(0XC4A, 0X10, 8, 0);
	add_func    (0XC88,0XDA8);
	set_func_flags(0XC88,0x4410);
	SetType(0XC88, "unsigned __int64 __fastcall update_hash(Node *a1);");
	set_frame_size(0XC88, 0X30, 8, 0);
	define_local_var(0XC88, 0XDA8, "[bp-0X20]", "offset");
	define_local_var(0XC88, 0XDA8, "[bp-0X10]", "hash");
	add_func    (0XDA8,0XE7F);
	set_func_flags(0XDA8,0x4410);
	SetType(0XDA8, "unsigned __int64 __fastcall str_show(Node *ptr);");
	set_frame_size(0XDA8, 0X30, 8, 0);
	define_local_var(0XDA8, 0XE7F, "[bp-0X14]", "idx");
	define_local_var(0XDA8, 0XE7F, "[bp-0X10]", "content");
	add_func    (0XE80,0XFED);
	set_func_flags(0XE80,0x4410);
	SetType(0XE80, "unsigned __int64 __fastcall str_set(Node *str);");
	set_frame_size(0XE80, 0X40, 8, 0);
	define_local_var(0XE80, 0XFED, "[bp-0X30]", "length");
	define_local_var(0XE80, 0XFED, "[bp-0X2C]", "idx");
	define_local_var(0XE80, 0XFED, "[bp-0X20]", "content");
	add_func    (0XFEE,0X10C5);
	set_func_flags(0XFEE,0x4410);
	SetType(0XFEE, "unsigned __int64 __fastcall int_set(Node *a1);");
	set_frame_size(0XFEE, 0X30, 8, 0);
	define_local_var(0XFEE, 0X10C5, "[bp-0X1C]", "idx");
	define_local_var(0XFEE, 0X10C5, "[bp-0X18]", "val");
	add_func    (0X10C6,0X1184);
	set_func_flags(0X10C6,0x4410);
	SetType(0X10C6, "unsigned __int64 __fastcall int_show(Node *a1);");
	set_frame_size(0X10C6, 0X30, 8, 0);
	add_func    (0X1184,0X12C6);
	set_func_flags(0X1184,0x4410);
	set_frame_size(0X1184, 0X20, 8, 0);
	add_func    (0X12C6,0X131A);
	set_func_flags(0X12C6,0x4410);
	set_frame_size(0X12C6, 0, 8, 0);
	add_func    (0X131A,0X137B);
	set_func_flags(0X131A,0x4410);
	set_frame_size(0X131A, 0, 8, 0);
	add_func    (0X137B,0X1509);
	set_func_flags(0X137B,0x4410);
	SetType(0X137B, "int __cdecl main(int, char **, char **);");
	set_frame_size(0X137B, 0X30, 8, 0);
	define_local_var(0X137B, 0X1509, "[bp-0X30]", "input");
	define_local_var(0X137B, 0X1509, "[bp-0X20]", "buf");
	add_func    (0X150A,0X153D);
	set_func_flags(0X150A,0x4410);
	SetType(0X150A, "__int64 __fastcall sub_150A(obj *ptr, int length);");
	set_frame_size(0X150A, 0X10, 8, 0);
	add_func    (0X153E,0X1549);
	set_func_flags(0X153E,0x4410);
	set_frame_size(0X153E, 0X8, 8, 0);
	add_func    (0X154A,0X1555);
	set_func_flags(0X154A,0x4410);
	set_frame_size(0X154A, 0X8, 8, 0);
	add_func    (0X1556,0X1568);
	set_func_flags(0X1556,0x4410);
	set_frame_size(0X1556, 0X8, 8, 0);
	add_func    (0X1568,0X15CF);
	set_func_flags(0X1568,0x4410);
	SetType(0X1568, "__int64 __fastcall sub_1568(Node *a1);");
	set_frame_size(0X1568, 0X10, 8, 0);
	add_func    (0X15D0,0X15F9);
	set_func_flags(0X15D0,0x4410);
	SetType(0X15D0, "Node *__fastcall int_arr(Node *ptr);");
	set_frame_size(0X15D0, 0X10, 8, 0);
	add_func    (0X15FA,0X1623);
	set_func_flags(0X15FA,0x4410);
	SetType(0X15FA, "Node *__fastcall str_arr(Node *a1);");
	set_frame_size(0X15FA, 0X10, 8, 0);
	define_local_var(0X15FA, 0X1623, "[bp-0X8]", "a1");
	add_func    (0X1630,0X1695);
	set_func_flags(0X1630,0x4400);
	SetType(0X1630, "void init(void);");
	set_frame_size(0X1630, 0X38, 0, 0);
	add_func    (0X16A0,0X16A2);
	set_func_flags(0X16A0,0x4440);
	SetType(0X16A0, "void fini(void);");
	set_frame_size(0X16A0, 0, 0, 0);
	add_func    (0X16A4,0X16AD);
	set_func_flags(0X16A4,0x4400);
	set_frame_size(0X16A4, 0X8, 0, 0);
	add_func    (0X2020E8,0X2020F0);
	set_func_flags(0X2020E8,0x400);
	SetType(0X2020E8, "int setvbuf(FILE *stream, char *buf, int modes, size_t n);");
	add_func    (0X2020F0,0X2020F8);
	set_func_flags(0X2020F0,0x400);
	SetType(0X2020F0, "int printf(const char *format, ...);");
	add_func    (0X2020F8,0X202100);
	set_func_flags(0X2020F8,0x400);
	add_func    (0X202100,0X202108);
	set_func_flags(0X202100,0x400);
	SetType(0X202100, "void *memset(void *s, int c, size_t n);");
	add_func    (0X202110,0X202118);
	set_func_flags(0X202110,0x400);
	SetType(0X202110, "_QWORD __cdecl operator_new(unsigned __int64);");
	add_func    (0X202118,0X202120);
	set_func_flags(0X202118,0x401);
	add_func    (0X202128,0X202130);
	set_func_flags(0X202128,0x400);
	SetType(0X202128, "int scanf(const char *format, ...);");
	add_func    (0X202130,0X202138);
	set_func_flags(0X202130,0x400);
	SetType(0X202130, "void *malloc(size_t size);");
	add_func    (0X202138,0X202140);
	set_func_flags(0X202138,0x400);
	SetType(0X202138, "int strcmp(const char *s1, const char *s2);");
	add_func    (0X202140,0X202148);
	set_func_flags(0X202140,0x400);
	SetType(0X202140, "ssize_t read(int fd, void *buf, size_t nbytes);");
	add_func    (0X202148,0X202150);
	set_func_flags(0X202148,0x400);
	SetType(0X202148, "int puts(const char *s);");
	add_func    (0X202150,0X202158);
	set_func_flags(0X202150,0x400);
	SetType(0X202150, "int __cdecl _libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);");
	add_func    (0X202160,0X202168);
	set_func_flags(0X202160,0x400);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0,"es",0,3);
	split_sreg_range(0XA38,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA4F,"es",0,3);
	split_sreg_range(0XA50,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB00,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB08,"es",0,3);
	split_sreg_range(0XB10,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16A2,"es",0,3);
	split_sreg_range(0X16A4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16AD,"es",0,3);
	split_sreg_range(0X16B0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1873,"es",0,3);
	split_sreg_range(0X1874,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1938,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X201CC0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X201CC8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X201CD0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X201D70,"es",0,3);
	split_sreg_range(0X201F70,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202000,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202010,"es",0,3);
	split_sreg_range(0X202020,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2020E8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0,"ss",0,3);
	split_sreg_range(0XA38,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA4F,"ss",0,3);
	split_sreg_range(0XA50,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB00,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB08,"ss",0,3);
	split_sreg_range(0XB10,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16A2,"ss",0,3);
	split_sreg_range(0X16A4,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16AD,"ss",0,3);
	split_sreg_range(0X16B0,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1873,"ss",0,3);
	split_sreg_range(0X1874,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1938,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X201CC0,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X201CC8,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X201CD0,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X201D70,"ss",0,3);
	split_sreg_range(0X201F70,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202000,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202010,"ss",0,3);
	split_sreg_range(0X202020,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2020E8,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0,"ds",0X10,3);
	split_sreg_range(0XA38,"ds",0X10,3);
	split_sreg_range(0XA4F,"ds",0X10,3);
	split_sreg_range(0XA50,"ds",0X10,3);
	split_sreg_range(0XB00,"ds",0X10,3);
	split_sreg_range(0XB08,"ds",0X10,3);
	split_sreg_range(0XB10,"ds",0X10,3);
	split_sreg_range(0X16A2,"ds",0X10,3);
	split_sreg_range(0X16A4,"ds",0X10,3);
	split_sreg_range(0X16AD,"ds",0X10,3);
	split_sreg_range(0X16B0,"ds",0X10,3);
	split_sreg_range(0X1873,"ds",0X10,3);
	split_sreg_range(0X1874,"ds",0X10,3);
	split_sreg_range(0X1938,"ds",0X10,3);
	split_sreg_range(0X201CC0,"ds",0X10,3);
	split_sreg_range(0X201CC8,"ds",0X10,3);
	split_sreg_range(0X201CD0,"ds",0X10,3);
	split_sreg_range(0X201D70,"ds",0X10,3);
	split_sreg_range(0X201F70,"ds",0X10,3);
	split_sreg_range(0X202000,"ds",0X10,3);
	split_sreg_range(0X202010,"ds",0X10,3);
	split_sreg_range(0X202020,"ds",0X10,3);
	split_sreg_range(0X2020E8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0,"fs",0,3);
	split_sreg_range(0XA38,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA4F,"fs",0,3);
	split_sreg_range(0XA50,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB00,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB08,"fs",0,3);
	split_sreg_range(0XB10,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16A2,"fs",0,3);
	split_sreg_range(0X16A4,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16AD,"fs",0,3);
	split_sreg_range(0X16B0,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1873,"fs",0,3);
	split_sreg_range(0X1874,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1938,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X201CC0,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X201CC8,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X201CD0,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X201D70,"fs",0,3);
	split_sreg_range(0X201F70,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202000,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202010,"fs",0,3);
	split_sreg_range(0X202020,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2020E8,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0,"gs",0,3);
	split_sreg_range(0XA38,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA4F,"gs",0,3);
	split_sreg_range(0XA50,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB00,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB08,"gs",0,3);
	split_sreg_range(0XB10,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16A2,"gs",0,3);
	split_sreg_range(0X16A4,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16AD,"gs",0,3);
	split_sreg_range(0X16B0,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1873,"gs",0,3);
	split_sreg_range(0X1874,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1938,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X201CC0,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X201CC8,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X201CD0,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X201D70,"gs",0,3);
	split_sreg_range(0X201F70,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202000,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202010,"gs",0,3);
	split_sreg_range(0X202020,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2020E8,"gs",0XFFFFFFFFFFFFFFFF,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
        end_type_updating(UTP_STRUCT);
}

// End of file.
