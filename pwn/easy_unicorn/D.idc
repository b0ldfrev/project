//
// +-------------------------------------------------------------------------+
// |      This file was generated by The Interactive Disassembler (IDA)      |
// |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
// |                      License info: 74-1C25-4997-EA                      |
// |                      <error retrieving user info>                       |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  ApplyStrucTInfos();   // structure type infos
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("metapc", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 6);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLAG, SW_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 16);
	set_inf_attr(INF_COMMENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
	add_default_til("gnulnx_x64");
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	set_selector(0X1,0);
	set_selector(0X2,0);
	set_selector(0X3,0);
	set_selector(0X4,0);
	set_selector(0X5,0);
	set_selector(0X6,0);
	;
	add_segm_ex(0X400000,0X401E88,0X1,2,1,2,ADDSEG_NOSREG);
	SegRename(0X400000,"LOAD");
	SegClass (0X400000,"CODE");
	SegDefReg(0x400000,"es",0x0);
	SegDefReg(0x400000,"ss",0x0);
	SegDefReg(0x400000,"ds",0x6);
	SegDefReg(0x400000,"fs",0x0);
	SegDefReg(0x400000,"gs",0x0);
	set_segm_type(0X400000,2);
	add_segm_ex(0X602DF0,0X6031D8,0X2,2,1,2,ADDSEG_NOSREG);
	SegRename(0X602DF0,"LOAD");
	SegClass (0X602DF0,"DATA");
	SegDefReg(0x602DF0,"es",0x0);
	SegDefReg(0x602DF0,"ss",0x0);
	SegDefReg(0x602DF0,"ds",0x6);
	SegDefReg(0x602DF0,"fs",0x0);
	SegDefReg(0x602DF0,"gs",0x0);
	set_segm_type(0X602DF0,3);
	set_inf_attr(INF_LOW_OFF, 0x400000);
	set_inf_attr(INF_HIGH_OFF, 0x6031D8);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("Elf64_Dyn");
	SetType(get_member_id(id, 0x0), "unsigned __int64");
	SetType(get_member_id(id, 0x8), "unsigned __int64");
	id = get_struc_id("sandbox");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x8), "_QWORD");
	SetType(get_member_id(id, 0x10), "_QWORD");
	SetType(get_member_id(id, 0x18), "_QWORD");
	SetType(get_member_id(id, 0x20), "char[95]");
	SetType(get_member_id(id, 0x7F), "char[16]");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"Elf64_Dyn",0);
	id = add_struc(-1,"sandbox",0);
	
	id = get_struc_id("Elf64_Dyn");
	mid = add_struc_member(id,"d_tag",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"d_un",	0X8,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("sandbox");
	mid = add_struc_member(id,"vtable",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"count",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"cpuid_0",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"cpuid_1",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"a",	0X20,	0x000400,	-1,	95);
	mid = add_struc_member(id,"input",	0X7F,	0x000400,	-1,	16);
	set_struc_align(id,3);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	set_cmt	(0X400000,	"File format: \\x7FELF",	0);
	update_extra_cmt		(0X400000,	E_PREV + 0,	"; File Name   : C:\\Users\\杨鑫顺\\Desktop\\D");
	update_extra_cmt		(0X400000,	E_PREV + 1,	"; Format      : ELF64 for x86-64 (Executable)");
	update_extra_cmt		(0X400000,	E_PREV + 2,	"; Imagebase   : 400000");
	update_extra_cmt		(0X400000,	E_PREV + 3,	"; Interpreter '/lib64/ld-linux-x86-64.so.2'");
	update_extra_cmt		(0X400000,	E_PREV + 4,	"; ");
	create_dword	(x=0X400000);
	op_hex		(x,	0);
	set_cmt	(0X400004,	"File class: 64-bit",	0);
	create_byte	(x=0X400004);
	op_hex		(x,	0);
	set_cmt	(0X400005,	"Data encoding: little-endian",	0);
	create_byte	(x=0X400005);
	op_hex		(x,	0);
	set_cmt	(0X400006,	"File version",	0);
	create_byte	(x=0X400006);
	op_hex		(x,	0);
	set_cmt	(0X400007,	"OS/ABI: UNIX System V ABI",	0);
	create_byte	(x=0X400007);
	op_hex		(x,	0);
	set_cmt	(0X400008,	"ABI Version",	0);
	create_byte	(x=0X400008);
	op_hex		(x,	0);
	set_cmt	(0X400009,	"Padding",	0);
	create_byte	(x=0X400009);
	make_array	(x,	0X7);
	op_hex		(x,	0);
	set_cmt	(0X400010,	"File type: Executable",	0);
	create_word	(x=0X400010);
	op_hex		(x,	0);
	set_cmt	(0X400012,	"Machine: x86-64",	0);
	create_word	(x=0X400012);
	op_hex		(x,	0);
	set_cmt	(0X400014,	"File version",	0);
	create_dword	(x=0X400014);
	op_hex		(x,	0);
	set_cmt	(0X400018,	"Entry point",	0);
	create_qword	(x=0X400018);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X400020,	"PHT file offset",	0);
	create_qword	(x=0X400020);
	op_hex		(x,	0);
	set_cmt	(0X400028,	"SHT file offset",	0);
	create_qword	(x=0X400028);
	op_hex		(x,	0);
	set_cmt	(0X400030,	"Processor-specific flags",	0);
	create_dword	(x=0X400030);
	op_hex		(x,	0);
	set_cmt	(0X400034,	"ELF header size",	0);
	create_word	(x=0X400034);
	op_hex		(x,	0);
	set_cmt	(0X400036,	"PHT entry size",	0);
	create_word	(x=0X400036);
	op_hex		(x,	0);
	set_cmt	(0X400038,	"Number of entries in PHT",	0);
	create_word	(x=0X400038);
	op_hex		(x,	0);
	set_cmt	(0X40003A,	"SHT entry size",	0);
	create_word	(x=0X40003A);
	op_hex		(x,	0);
	set_cmt	(0X40003C,	"Number of entries in SHT",	0);
	create_word	(x=0X40003C);
	op_hex		(x,	0);
	set_cmt	(0X40003E,	"SHT entry index for string table",	0);
	create_word	(x=0X40003E);
	op_hex		(x,	0);
	set_cmt	(0X400040,	"Type: PHDR",	0);
	update_extra_cmt		(0X400040,	E_PREV + 0,	"; ELF64 Program Header");
	update_extra_cmt		(0X400040,	E_PREV + 1,	"; PHT Entry 0");
	create_dword	(x=0X400040);
	op_hex		(x,	0);
	set_cmt	(0X400044,	"Flags",	0);
	create_dword	(x=0X400044);
	op_hex		(x,	0);
	set_cmt	(0X400048,	"File offset",	0);
	create_qword	(x=0X400048);
	op_hex		(x,	0);
	set_cmt	(0X400050,	"Virtual address",	0);
	create_qword	(x=0X400050);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X400058,	"Physical address",	0);
	create_qword	(x=0X400058);
	op_hex		(x,	0);
	set_cmt	(0X400060,	"Size in file image",	0);
	create_qword	(x=0X400060);
	op_hex		(x,	0);
	set_cmt	(0X400068,	"Size in memory image",	0);
	create_qword	(x=0X400068);
	op_hex		(x,	0);
	set_cmt	(0X400070,	"Alignment",	0);
	create_qword	(x=0X400070);
	op_hex		(x,	0);
	set_cmt	(0X400078,	"Type: INTERP",	0);
	update_extra_cmt		(0X400078,	E_PREV + 0,	"; PHT Entry 1");
	create_dword	(x=0X400078);
	op_hex		(x,	0);
	set_cmt	(0X40007C,	"Flags",	0);
	create_dword	(x=0X40007C);
	op_hex		(x,	0);
	set_cmt	(0X400080,	"File offset",	0);
	create_qword	(x=0X400080);
	op_hex		(x,	0);
	set_cmt	(0X400088,	"Virtual address",	0);
	create_qword	(x=0X400088);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X400090,	"Physical address",	0);
	create_qword	(x=0X400090);
	op_hex		(x,	0);
	set_cmt	(0X400098,	"Size in file image",	0);
	create_qword	(x=0X400098);
	op_hex		(x,	0);
	set_cmt	(0X4000A0,	"Size in memory image",	0);
	create_qword	(x=0X4000A0);
	op_hex		(x,	0);
	set_cmt	(0X4000A8,	"Alignment",	0);
	create_qword	(x=0X4000A8);
	op_hex		(x,	0);
	set_cmt	(0X4000B0,	"Type: LOAD",	0);
	update_extra_cmt		(0X4000B0,	E_PREV + 0,	"; PHT Entry 2");
	create_dword	(x=0X4000B0);
	op_hex		(x,	0);
	set_cmt	(0X4000B4,	"Flags",	0);
	create_dword	(x=0X4000B4);
	op_hex		(x,	0);
	set_cmt	(0X4000B8,	"File offset",	0);
	create_qword	(x=0X4000B8);
	op_hex		(x,	0);
	set_cmt	(0X4000C0,	"Virtual address",	0);
	create_qword	(x=0X4000C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4000C8,	"Physical address",	0);
	create_qword	(x=0X4000C8);
	op_hex		(x,	0);
	set_cmt	(0X4000D0,	"Size in file image",	0);
	create_qword	(x=0X4000D0);
	op_hex		(x,	0);
	set_cmt	(0X4000D8,	"Size in memory image",	0);
	create_qword	(x=0X4000D8);
	op_hex		(x,	0);
	set_cmt	(0X4000E0,	"Alignment",	0);
	create_qword	(x=0X4000E0);
	op_hex		(x,	0);
	set_cmt	(0X4000E8,	"Type: LOAD",	0);
	update_extra_cmt		(0X4000E8,	E_PREV + 0,	"; PHT Entry 3");
	create_dword	(x=0X4000E8);
	op_hex		(x,	0);
	set_cmt	(0X4000EC,	"Flags",	0);
	create_dword	(x=0X4000EC);
	op_hex		(x,	0);
	set_cmt	(0X4000F0,	"File offset",	0);
	create_qword	(x=0X4000F0);
	op_hex		(x,	0);
	set_cmt	(0X4000F8,	"Virtual address",	0);
	create_qword	(x=0X4000F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X400100,	"Physical address",	0);
	create_qword	(x=0X400100);
	op_hex		(x,	0);
	set_cmt	(0X400108,	"Size in file image",	0);
	create_qword	(x=0X400108);
	op_hex		(x,	0);
	set_cmt	(0X400110,	"Size in memory image",	0);
	create_qword	(x=0X400110);
	op_hex		(x,	0);
	set_cmt	(0X400118,	"Alignment",	0);
	create_qword	(x=0X400118);
	op_hex		(x,	0);
	set_cmt	(0X400120,	"Type: DYNAMIC",	0);
	update_extra_cmt		(0X400120,	E_PREV + 0,	"; PHT Entry 4");
	create_dword	(x=0X400120);
	op_hex		(x,	0);
	set_cmt	(0X400124,	"Flags",	0);
	create_dword	(x=0X400124);
	op_hex		(x,	0);
	set_cmt	(0X400128,	"File offset",	0);
	create_qword	(x=0X400128);
	op_hex		(x,	0);
	set_cmt	(0X400130,	"Virtual address",	0);
	create_qword	(x=0X400130);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X400138,	"Physical address",	0);
	create_qword	(x=0X400138);
	op_hex		(x,	0);
	set_cmt	(0X400140,	"Size in file image",	0);
	create_qword	(x=0X400140);
	op_hex		(x,	0);
	set_cmt	(0X400148,	"Size in memory image",	0);
	create_qword	(x=0X400148);
	op_hex		(x,	0);
	set_cmt	(0X400150,	"Alignment",	0);
	create_qword	(x=0X400150);
	op_hex		(x,	0);
	set_cmt	(0X400158,	"Type: NOTE",	0);
	update_extra_cmt		(0X400158,	E_PREV + 0,	"; PHT Entry 5");
	create_dword	(x=0X400158);
	op_hex		(x,	0);
	set_cmt	(0X40015C,	"Flags",	0);
	create_dword	(x=0X40015C);
	op_hex		(x,	0);
	set_cmt	(0X400160,	"File offset",	0);
	create_qword	(x=0X400160);
	op_hex		(x,	0);
	set_cmt	(0X400168,	"Virtual address",	0);
	create_qword	(x=0X400168);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X400170,	"Physical address",	0);
	create_qword	(x=0X400170);
	op_hex		(x,	0);
	set_cmt	(0X400178,	"Size in file image",	0);
	create_qword	(x=0X400178);
	op_hex		(x,	0);
	set_cmt	(0X400180,	"Size in memory image",	0);
	create_qword	(x=0X400180);
	op_hex		(x,	0);
	set_cmt	(0X400188,	"Alignment",	0);
	create_qword	(x=0X400188);
	op_hex		(x,	0);
	set_cmt	(0X400190,	"Type: EH_FRAME",	0);
	update_extra_cmt		(0X400190,	E_PREV + 0,	"; PHT Entry 6");
	create_dword	(x=0X400190);
	op_hex		(x,	0);
	set_cmt	(0X400194,	"Flags",	0);
	create_dword	(x=0X400194);
	op_hex		(x,	0);
	set_cmt	(0X400198,	"File offset",	0);
	create_qword	(x=0X400198);
	op_hex		(x,	0);
	set_cmt	(0X4001A0,	"Virtual address",	0);
	create_qword	(x=0X4001A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4001A8,	"Physical address",	0);
	create_qword	(x=0X4001A8);
	op_hex		(x,	0);
	set_cmt	(0X4001B0,	"Size in file image",	0);
	create_qword	(x=0X4001B0);
	op_hex		(x,	0);
	set_cmt	(0X4001B8,	"Size in memory image",	0);
	create_qword	(x=0X4001B8);
	op_hex		(x,	0);
	set_cmt	(0X4001C0,	"Alignment",	0);
	create_qword	(x=0X4001C0);
	op_hex		(x,	0);
	set_cmt	(0X4001C8,	"Type: STACK",	0);
	update_extra_cmt		(0X4001C8,	E_PREV + 0,	"; PHT Entry 7");
	create_dword	(x=0X4001C8);
	op_hex		(x,	0);
	set_cmt	(0X4001CC,	"Flags",	0);
	create_dword	(x=0X4001CC);
	op_hex		(x,	0);
	set_cmt	(0X4001D0,	"File offset",	0);
	create_qword	(x=0X4001D0);
	op_hex		(x,	0);
	set_cmt	(0X4001D8,	"Virtual address",	0);
	create_qword	(0X4001D8);
	set_cmt	(0X4001E0,	"Physical address",	0);
	create_qword	(x=0X4001E0);
	op_hex		(x,	0);
	set_cmt	(0X4001E8,	"Size in file image",	0);
	create_qword	(x=0X4001E8);
	op_hex		(x,	0);
	set_cmt	(0X4001F0,	"Size in memory image",	0);
	create_qword	(x=0X4001F0);
	op_hex		(x,	0);
	set_cmt	(0X4001F8,	"Alignment",	0);
	create_qword	(x=0X4001F8);
	op_hex		(x,	0);
	set_cmt	(0X400200,	"Type: RO-AFTER",	0);
	update_extra_cmt		(0X400200,	E_PREV + 0,	"; PHT Entry 8");
	create_dword	(x=0X400200);
	op_hex		(x,	0);
	set_cmt	(0X400204,	"Flags",	0);
	create_dword	(x=0X400204);
	op_hex		(x,	0);
	set_cmt	(0X400208,	"File offset",	0);
	create_qword	(x=0X400208);
	op_hex		(x,	0);
	set_cmt	(0X400210,	"Virtual address",	0);
	create_qword	(x=0X400210);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X400218,	"Physical address",	0);
	create_qword	(x=0X400218);
	op_hex		(x,	0);
	set_cmt	(0X400220,	"Size in file image",	0);
	create_qword	(x=0X400220);
	op_hex		(x,	0);
	set_cmt	(0X400228,	"Size in memory image",	0);
	create_qword	(x=0X400228);
	op_hex		(x,	0);
	set_cmt	(0X400230,	"Alignment",	0);
	create_qword	(x=0X400230);
	op_hex		(x,	0);
	create_strlit	(0X400238,	0X1C);
	set_name	(0X400238,	"aLib64LdLinuxX8");
	create_dword	(0X400254);
	create_qword	(0X400258);
	make_array	(0X400258,	0X13);
	create_qword	(0X4002F0);
	make_array	(0X4002F0,	0X3);
	create_qword	(0X400308);
	make_array	(0X400308,	0X3);
	create_qword	(0X400320);
	make_array	(0X400320,	0X3);
	create_qword	(0X400338);
	make_array	(0X400338,	0X3);
	create_qword	(0X400350);
	make_array	(0X400350,	0X3);
	create_qword	(0X400368);
	make_array	(0X400368,	0X3);
	create_qword	(0X400380);
	make_array	(0X400380,	0X3);
	create_qword	(0X400398);
	make_array	(0X400398,	0X3);
	create_qword	(0X4003B0);
	make_array	(0X4003B0,	0X3);
	create_qword	(0X4003C8);
	make_array	(0X4003C8,	0X3);
	create_qword	(0X4003E0);
	make_array	(0X4003E0,	0X3);
	create_qword	(0X4003F8);
	make_array	(0X4003F8,	0X3);
	create_qword	(0X400410);
	make_array	(0X400410,	0X3);
	create_qword	(0X400428);
	make_array	(0X400428,	0X3);
	create_qword	(0X400440);
	make_array	(0X400440,	0X3);
	create_qword	(0X400458);
	make_array	(0X400458,	0X3);
	create_qword	(0X400470);
	make_array	(0X400470,	0X3);
	create_qword	(0X400488);
	make_array	(0X400488,	0X3);
	create_qword	(0X4004A0);
	make_array	(0X4004A0,	0X15);
	create_strlit	(0X400549,	0XF);
	set_name	(0X400549,	"aLibstdcSo6");
	create_strlit	(0X400558,	0XF);
	set_name	(0X400558,	"aGmonStart");
	create_strlit	(0X400567,	0X14);
	set_name	(0X400567,	"aJvRegisterclas");
	create_strlit	(0X40057B,	0X1C);
	set_name	(0X40057B,	"aItmDeregistert");
	create_strlit	(0X400597,	0X1A);
	set_name	(0X400597,	"aItmRegistertmc");
	create_strlit	(0X4005B1,	0X26);
	set_name	(0X4005B1,	"aZtvn10Cxxabiv1");
	create_strlit	(0X4005D7,	0X15);
	set_name	(0X4005D7,	"aGxxPersonality");
	create_strlit	(0X4005EC,	0X29);
	set_name	(0X4005EC,	"aZtvn10Cxxabiv1_0");
	create_strlit	(0X400615,	0X2A);
	set_name	(0X400615,	"aZtvn10Cxxabiv1_1");
	create_strlit	(0X40063F,	0XE);
	set_name	(0X40063F,	"aLibgccSSo1");
	create_strlit	(0X40064D,	0XF);
	set_name	(0X40064D,	"aUnwindResume");
	create_strlit	(0X40065C,	0XA);
	set_name	(0X40065C,	"aLibcSo6");
	create_strlit	(0X400666,	0X6);
	set_name	(0X400666,	"aFopen");
	create_strlit	(0X40066C,	0X5);
	set_name	(0X40066C,	"aPuts");
	create_strlit	(0X400671,	0X11);
	set_name	(0X400671,	"aStackChkFail");
	create_strlit	(0X400682,	0X6);
	set_name	(0X400682,	"aStdin");
	create_strlit	(0X400688,	0X7);
	set_name	(0X400688,	"aPrintf");
	create_strlit	(0X40068F,	0X6);
	set_name	(0X40068F,	"aFgets");
	create_strlit	(0X400695,	0X8);
	set_name	(0X400695,	"aGetchar");
	create_strlit	(0X40069D,	0X5);
	set_name	(0X40069D,	"aRead");
	create_strlit	(0X4006A2,	0X7);
	set_name	(0X4006A2,	"aMemcmp");
	create_strlit	(0X4006A9,	0X8);
	set_name	(0X4006A9,	"aToupper");
	create_strlit	(0X4006B1,	0X7);
	set_name	(0X4006B1,	"aStdout");
	create_strlit	(0X4006B8,	0X7);
	set_name	(0X4006B8,	"aFclose");
	create_strlit	(0X4006BF,	0X7);
	set_name	(0X4006BF,	"aStderr");
	create_strlit	(0X4006C6,	0X5);
	set_name	(0X4006C6,	"aAtol");
	create_strlit	(0X4006CB,	0X7);
	set_name	(0X4006CB,	"aSetbuf");
	create_strlit	(0X4006D2,	0X12);
	set_name	(0X4006D2,	"aLibcStartMain");
	create_strlit	(0X4006E4,	0X8);
	set_name	(0X4006E4,	"aGcc30");
	create_strlit	(0X4006EC,	0XB);
	set_name	(0X4006EC,	"aCxxabi13");
	create_strlit	(0X4006F7,	0XA);
	set_name	(0X4006F7,	"aGlibc24");
	create_strlit	(0X400701,	0XC);
	set_name	(0X400701,	"aGlibc225");
	make_array	(0X40070D,	0X3);
	create_qword	(0X400710);
	make_array	(0X400710,	0X18);
	create_qword	(x=0X4007D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X4007D8);
	make_array	(0X4007D8,	0X2);
	create_qword	(x=0X4007E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X4007F0);
	make_array	(0X4007F0,	0X2);
	create_qword	(x=0X400800);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X400808);
	make_array	(0X400808,	0X2);
	create_qword	(x=0X400818);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X400820);
	make_array	(0X400820,	0X2);
	create_qword	(x=0X400830);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X400838);
	make_array	(0X400838,	0X2);
	create_qword	(x=0X400848);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X400850);
	make_array	(0X400850,	0X2);
	create_qword	(x=0X400860);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X400868);
	make_array	(0X400868,	0X2);
	create_qword	(x=0X400878);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X400880);
	make_array	(0X400880,	0X2);
	create_qword	(x=0X400890);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X400898);
	make_array	(0X400898,	0X2);
	create_qword	(x=0X4008A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X4008B0);
	make_array	(0X4008B0,	0X2);
	create_qword	(x=0X4008C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X4008C8);
	make_array	(0X4008C8,	0X2);
	create_qword	(x=0X4008D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X4008E0);
	make_array	(0X4008E0,	0X2);
	create_qword	(x=0X4008F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X4008F8);
	make_array	(0X4008F8,	0X2);
	create_qword	(x=0X400908);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X400910);
	make_array	(0X400910,	0X2);
	create_qword	(x=0X400920);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X400928);
	make_array	(0X400928,	0X2);
	create_qword	(x=0X400938);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X400940);
	make_array	(0X400940,	0X2);
	create_qword	(x=0X400950);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X400958);
	make_array	(0X400958,	0X2);
	create_qword	(x=0X400968);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X400970);
	make_array	(0X400970,	0X2);
	create_qword	(x=0X400980);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X400988);
	make_array	(0X400988,	0X2);
	create_qword	(x=0X400998);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X4009A0);
	make_array	(0X4009A0,	0X2);
	create_qword	(x=0X4009B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X4009B8);
	make_array	(0X4009B8,	0X2);
	create_insn	(x=0X4009C8);
	op_hex		(x,	1);
	create_insn	(x=0X4009DD);
	op_hex		(x,	1);
	make_array	(0X4009E2,	0XE);
	create_insn	(0X4009F0);
	make_array	(0X4009FC,	0X4);
	create_insn	(0X400A00);
	set_name	(0X400A00,	"printf");
	create_insn	(0X400A06);
	create_insn	(0X400A10);
	set_name	(0X400A10,	"puts");
	create_insn	(0X400A16);
	create_insn	(0X400A20);
	set_name	(0X400A20,	"toupper");
	create_insn	(0X400A26);
	create_insn	(0X400A30);
	set_name	(0X400A30,	"read");
	create_insn	(0X400A36);
	create_insn	(0X400A40);
	set_name	(0X400A40,	"open");
	create_insn	(0X400A46);
	create_insn	(0X400A50);
	create_insn	(0X400A56);
	create_insn	(0X400A60);
	set_name	(0X400A60,	"fgets");
	create_insn	(0X400A66);
	create_insn	(0X400A70);
	set_name	(0X400A70,	"atol");
	create_insn	(0X400A76);
	create_insn	(0X400A80);
	set_name	(0X400A80,	"setbuf");
	create_insn	(0X400A86);
	create_insn	(0X400A90);
	set_name	(0X400A90,	"getchar");
	create_insn	(0X400A96);
	create_insn	(0X400AA0);
	set_name	(0X400AA0,	"stack_check");
	create_insn	(0X400AA6);
	create_insn	(0X400AB0);
	set_name	(0X400AB0,	"memcmp");
	create_insn	(0X400AB6);
	create_insn	(0X400AC0);
	set_name	(0X400AC0,	"close");
	create_insn	(0X400AC6);
	create_insn	(0X400AD0);
	create_insn	(0X400AD6);
	create_insn	(0X400AE0);
	create_insn	(0X400AE6);
	create_insn	(0X400AF0);
	make_array	(0X400AF6,	0XA);
	create_insn	(0X400B00);
	set_name	(0X400B00,	"start");
	create_insn	(x=0X400B09);
	op_hex		(x,	1);
	create_insn	(x=0X400B0F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X400B16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X400B1D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X400B2A,	0X6);
	create_insn	(x=0X400B30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X400B36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X400B50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X400B57,	0X9);
	create_insn	(0X400B60);
	make_array	(0X400B62,	0XE);
	create_insn	(x=0X400B70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X400B76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X400B7D);
	op_hex		(x,	1);
	create_insn	(x=0X400B87);
	op_hex		(x,	1);
	create_insn	(x=0X400B8E);
	op_hex		(x,	1);
	create_insn	(x=0X400B9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X400BA5,	0X3);
	create_insn	(0X400BA8);
	make_array	(0X400BAA,	0X6);
	create_insn	(0X400BB0);
	make_array	(0X400BCC,	0X4);
	create_insn	(x=0X400BD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X400BDD,	0X3);
	create_insn	(0X400BE0);
	create_insn	(0X400BF6);
	create_insn	(0X400C26);
	create_insn	(x=0X400C2A);
	op_hex		(x,	1);
	create_insn	(x=0X400C37);
	op_stkvar	(x,	0);
	create_insn	(x=0X400C3D);
	op_stkvar	(x,	1);
	create_insn	(x=0X400C53);
	op_stkvar	(x,	0);
	create_insn	(x=0X400C56);
	op_stkvar	(x,	1);
	create_insn	(x=0X400C5B);
	op_stkvar	(x,	0);
	create_insn	(x=0X400C60);
	op_stkvar	(x,	1);
	create_insn	(x=0X400C6C);
	op_stkvar	(x,	1);
	create_insn	(0X400C82);
	set_name	(0X400C82,	"to_hex");
	create_insn	(x=0X400C86);
	op_hex		(x,	1);
	create_insn	(x=0X400C8A);
	op_stkvar	(x,	0);
	create_insn	(x=0X400C8E);
	op_stkvar	(x,	0);
	create_insn	(x=0X400C92);
	op_stkvar	(x,	0);
	create_insn	(x=0X400C95);
	op_stkvar	(x,	0);
	create_insn	(x=0X400C9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X400C9F);
	op_stkvar	(x,	1);
	create_insn	(x=0X400CA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X400CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X400CBA);
	op_stkvar	(x,	0);
	create_insn	(x=0X400CBD);
	op_stkvar	(x,	1);
	create_insn	(x=0X400CC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X400CD2);
	op_stkvar	(x,	0);
	create_insn	(x=0X400CD5);
	op_stkvar	(x,	1);
	create_insn	(x=0X400CE3);
	op_stkvar	(x,	0);
	create_insn	(x=0X400CE6);
	op_stkvar	(x,	0);
	create_insn	(x=0X400CEC);
	op_stkvar	(x,	0);
	create_insn	(x=0X400CF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X400CFE);
	op_stkvar	(x,	0);
	create_insn	(x=0X400D01);
	op_stkvar	(x,	0);
	create_insn	(x=0X400D07);
	op_stkvar	(x,	0);
	create_insn	(x=0X400D0B);
	op_stkvar	(x,	1);
	create_insn	(x=0X400D11);
	op_stkvar	(x,	1);
	create_insn	(x=0X400D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X400D1E);
	op_hex		(x,	1);
	create_insn	(x=0X400D21);
	op_stkvar	(x,	1);
	create_insn	(x=0X400D29);
	op_stkvar	(x,	0);
	create_insn	(0X400D32);
	create_insn	(0X400D35);
	set_name	(0X400D35,	"get_flag");
	create_insn	(x=0X400D39);
	op_hex		(x,	1);
	create_insn	(x=0X400D40);
	op_stkvar	(x,	0);
	create_insn	(x=0X400D50);
	op_stkvar	(x,	0);
	create_insn	(x=0X400D56);
	op_stkvar	(x,	1);
	create_insn	(x=0X400D5D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X400D6A);
	op_stkvar	(x,	0);
	create_insn	(x=0X400D6E);
	op_stkvar	(x,	0);
	create_insn	(x=0X400D75);
	op_stkvar	(x,	1);
	create_insn	(x=0X400D79);
	op_stkvar	(x,	1);
	create_insn	(x=0X400D8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X400D96);
	op_stkvar	(x,	1);
	set_cmt	(0X400D9A,	"a2",	0);
	create_insn	(x=0X400D9D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X400DAE);
	op_stkvar	(x,	1);
	set_cmt	(0X400DB5,	"a2",	0);
	create_insn	(x=0X400DB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X400DC8);
	op_stkvar	(x,	1);
	create_insn	(0X400DDE);
	create_insn	(x=0X400DE2);
	op_hex		(x,	1);
	create_insn	(x=0X400DE6);
	op_stkvar	(x,	0);
	create_insn	(x=0X400DEA);
	op_stkvar	(x,	0);
	create_insn	(x=0X400DEE);
	op_stkvar	(x,	1);
	set_cmt	(0X400DF2,	"ptr",	0);
	create_insn	(x=0X400DFA);
	op_stkvar	(x,	0);
	create_insn	(x=0X400DFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X400E02);
	op_stkvar	(x,	1);
	create_insn	(x=0X400E1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X400E2B);
	op_stkvar	(x,	1);
	create_insn	(x=0X400E37);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X400E48);
	create_insn	(x=0X400E4F);
	op_hex		(x,	1);
	create_insn	(x=0X400E5F);
	op_stkvar	(x,	0);
	create_insn	(x=0X400EA1);
	op_stkvar	(x,	1);
	set_cmt	(0X400EA8,	"ptr",	0);
	create_insn	(x=0X400EB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X400EB7);
	op_stkvar	(x,	0);
	create_insn	(x=0X400EBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X400ECB);
	op_stkvar	(x,	1);
	create_insn	(x=0X400ED7);
	op_stkvar	(x,	1);
	set_cmt	(0X400EDE,	"ptr",	0);
	create_insn	(x=0X400EE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X400EF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X400F02);
	op_stkvar	(x,	1);
	set_cmt	(0X400F11,	"ptr_3",	0);
	set_cmt	(0X400F14,	"ptr_",	0);
	create_insn	(x=0X400F20);
	op_stkvar	(x,	1);
	create_insn	(x=0X400F38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X400F4F);
	create_insn	(x=0X400F50);
	op_stkvar	(x,	1);
	create_insn	(x=0X400F61);
	op_stkvar	(x,	1);
	create_insn	(x=0X400F6D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X400F7D);
	op_stkvar	(x,	1);
	create_insn	(x=0X400F9A);
	op_stkvar	(x,	1);
	create_insn	(0X400FAB);
	create_insn	(x=0X400FAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X400FCD);
	op_hex		(x,	1);
	create_insn	(0X400FD9);
	set_name	(0X400FD9,	"get_cpu_id");
	create_insn	(x=0X400FDE);
	op_stkvar	(x,	0);
	create_insn	(x=0X400FE1);
	op_stkvar	(x,	0);
	create_insn	(x=0X400FE8);
	op_stkvar	(x,	0);
	create_insn	(x=0X400FEF);
	op_stkvar	(x,	0);
	create_insn	(x=0X400FF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X401007);
	op_stkvar	(x,	0);
	create_insn	(x=0X40100B);
	op_stkvar	(x,	0);
	create_insn	(x=0X40100E);
	op_stkvar	(x,	0);
	create_insn	(x=0X401011);
	op_stkvar	(x,	1);
	create_insn	(x=0X401014);
	op_hex		(x,	1);
	create_insn	(x=0X40101B);
	op_stkvar	(x,	1);
	create_insn	(x=0X40101E);
	op_stkvar	(x,	1);
	create_insn	(0X40102A);
	set_name	(0X40102A,	"get_input_to_hex");
	create_insn	(x=0X40102E);
	op_hex		(x,	1);
	create_insn	(x=0X401032);
	op_stkvar	(x,	0);
	create_insn	(x=0X401036);
	op_stkvar	(x,	0);
	create_insn	(x=0X40103A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40104E);
	op_stkvar	(x,	0);
	create_insn	(x=0X401051);
	op_stkvar	(x,	0);
	create_insn	(x=0X401057);
	op_stkvar	(x,	0);
	create_insn	(x=0X40105D);
	op_stkvar	(x,	1);
	create_insn	(x=0X401064);
	op_stkvar	(x,	0);
	create_insn	(x=0X401067);
	op_stkvar	(x,	1);
	set_cmt	(0X40106D,	"a3",	0);
	create_insn	(x=0X401070);
	op_stkvar	(x,	0);
	create_insn	(x=0X40107C);
	op_stkvar	(x,	1);
	create_insn	(x=0X401083);
	op_stkvar	(x,	1);
	create_insn	(x=0X401089);
	op_stkvar	(x,	1);
	create_insn	(x=0X401099);
	op_stkvar	(x,	0);
	create_insn	(0X40109E);
	create_insn	(x=0X40109F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4010AE);
	op_stkvar	(x,	1);
	set_cmt	(0X4010B2,	"a3",	0);
	create_insn	(x=0X4010B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X4010C0);
	op_stkvar	(x,	1);
	set_cmt	(0X4010C8,	"a2",	0);
	create_insn	(x=0X4010CB);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4010DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X4010E5);
	op_stkvar	(x,	1);
	set_cmt	(0X4010ED,	"Immediate_64",	0);
	set_cmt	(0X4010F2,	"my_key2",	0);
	set_cmt	(0X4010F5,	"my_key",	0);
	create_insn	(x=0X4010FD);
	op_stkvar	(x,	1);
	create_insn	(x=0X401107);
	op_stkvar	(x,	1);
	create_insn	(x=0X40110F);
	op_stkvar	(x,	1);
	create_insn	(x=0X401116);
	op_stkvar	(x,	1);
	create_insn	(0X401120);
	set_name	(0X401120,	"vtable_plus");
	create_insn	(x=0X401124);
	op_stkvar	(x,	0);
	create_insn	(x=0X401128);
	op_stkvar	(x,	1);
	create_insn	(x=0X401133);
	op_stkvar	(x,	1);
	create_insn	(0X40113E);
	create_insn	(x=0X401143);
	op_hex		(x,	1);
	create_insn	(x=0X401147);
	op_stkvar	(x,	0);
	create_insn	(x=0X40114B);
	op_stkvar	(x,	1);
	create_insn	(x=0X401156);
	op_stkvar	(x,	1);
	create_insn	(x=0X40115E);
	op_stkvar	(x,	1);
	create_insn	(x=0X401169);
	op_stkvar	(x,	1);
	create_insn	(x=0X40117E);
	op_stkvar	(x,	1);
	create_insn	(x=0X401198);
	op_hex		(x,	1);
	create_insn	(0X4011A0);
	create_insn	(x=0X4011A4);
	op_stkvar	(x,	0);
	create_insn	(x=0X4011A8);
	op_stkvar	(x,	1);
	create_insn	(0X4011AE);
	set_name	(0X4011AE,	"print_ubuntu");
	create_insn	(x=0X4011B2);
	op_hex		(x,	1);
	create_insn	(x=0X4011B6);
	op_stkvar	(x,	0);
	create_insn	(x=0X4011BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4011C8);
	set_name	(0X4011C8,	"backdoor");
	create_insn	(x=0X4011CC);
	op_hex		(x,	1);
	create_insn	(x=0X4011D3);
	op_stkvar	(x,	0);
	create_insn	(x=0X4011E3);
	op_stkvar	(x,	0);
	create_insn	(x=0X4011E9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4011F3);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4011FD);
	op_stkvar	(x,	1);
	set_cmt	(0X401204,	"a2",	0);
	create_insn	(x=0X401207);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401216);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401225);
	op_stkvar	(x,	1);
	set_cmt	(0X401231,	"a2",	0);
	create_insn	(x=0X40123E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401252);
	op_stkvar	(x,	0);
	create_insn	(x=0X401259);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40126D);
	op_stkvar	(x,	0);
	create_insn	(x=0X401274);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401288);
	op_stkvar	(x,	0);
	create_insn	(x=0X40128F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4012A3);
	op_stkvar	(x,	0);
	create_insn	(x=0X4012AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X4012B1);
	op_stkvar	(x,	1);
	create_insn	(x=0X4012B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X4012BF);
	op_stkvar	(x,	1);
	create_insn	(x=0X4012CB);
	op_stkvar	(x,	0);
	create_insn	(x=0X4012D2);
	op_stkvar	(x,	1);
	set_cmt	(0X4012D9,	"a2",	0);
	create_insn	(x=0X4012DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4012EC);
	op_stkvar	(x,	1);
	create_insn	(0X401302);
	create_insn	(x=0X401306);
	op_stkvar	(x,	0);
	create_insn	(x=0X40130A);
	op_stkvar	(x,	1);
	create_insn	(0X401314);
	create_insn	(x=0X401318);
	op_stkvar	(x,	0);
	create_insn	(x=0X40131C);
	op_stkvar	(x,	1);
	create_insn	(0X401326);
	create_insn	(x=0X40132A);
	op_hex		(x,	1);
	create_insn	(x=0X40132E);
	op_stkvar	(x,	0);
	create_insn	(x=0X40133B);
	op_stkvar	(x,	0);
	create_insn	(x=0X401341);
	op_stkvar	(x,	1);
	create_insn	(x=0X401350);
	op_stkvar	(x,	0);
	create_insn	(x=0X401354);
	op_stkvar	(x,	0);
	create_insn	(x=0X401358);
	op_stkvar	(x,	0);
	create_insn	(x=0X40135F);
	op_stkvar	(x,	0);
	create_insn	(x=0X401365);
	op_stkvar	(x,	1);
	create_insn	(x=0X40136A);
	op_stkvar	(x,	1);
	create_insn	(x=0X40136F);
	op_stkvar	(x,	1);
	create_insn	(x=0X401377);
	op_stkvar	(x,	1);
	create_insn	(x=0X40137E);
	op_stkvar	(x,	1);
	create_insn	(x=0X401383);
	op_stkvar	(x,	0);
	create_insn	(x=0X401387);
	op_stkvar	(x,	0);
	create_insn	(x=0X40138D);
	op_stkvar	(x,	1);
	create_insn	(x=0X401391);
	op_stkvar	(x,	0);
	create_insn	(x=0X401395);
	op_stkvar	(x,	1);
	create_insn	(x=0X40139F);
	op_stkvar	(x,	1);
	set_cmt	(0X4013A7,	"a4",	0);
	create_insn	(x=0X4013A9);
	op_stkvar	(x,	1);
	set_cmt	(0X4013B1,	"a3",	0);
	create_insn	(x=0X4013B3);
	op_stkvar	(x,	1);
	set_cmt	(0X4013B9,	"a5",	0);
	set_cmt	(0X4013BC,	"a2",	0);
	create_insn	(x=0X4013BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4013CE);
	op_stkvar	(x,	1);
	create_insn	(0X4013E4);
	create_insn	(x=0X4013E8);
	op_stkvar	(x,	0);
	create_insn	(x=0X4013EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4013F1);
	op_stkvar	(x,	1);
	create_insn	(0X4013FC);
	create_insn	(x=0X401400);
	op_hex		(x,	1);
	create_insn	(x=0X401404);
	op_stkvar	(x,	0);
	create_insn	(x=0X401408);
	op_stkvar	(x,	1);
	set_cmt	(0X401410,	"ptr_1",	0);
	create_insn	(x=0X401418);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40141D);
	op_stkvar	(x,	1);
	create_insn	(0X401428);
	set_name	(0X401428,	"open_flag");
	create_insn	(x=0X40142C);
	op_hex		(x,	1);
	create_insn	(x=0X401430);
	op_stkvar	(x,	0);
	create_insn	(x=0X401434);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40143E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401452);
	op_stkvar	(x,	0);
	create_insn	(x=0X401455);
	op_stkvar	(x,	0);
	create_insn	(x=0X40145B);
	op_stkvar	(x,	0);
	create_insn	(x=0X401461);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40146B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X401478);
	set_name	(0X401478,	"print_safe_mode");
	create_insn	(x=0X40147C);
	op_hex		(x,	1);
	create_insn	(x=0X401480);
	op_stkvar	(x,	0);
	create_insn	(x=0X401484);
	op_stkvar	(x,	1);
	create_insn	(x=0X401490);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40149E);
	create_insn	(x=0X4014A3);
	op_hex		(x,	1);
	create_insn	(x=0X4014A7);
	op_stkvar	(x,	0);
	create_insn	(x=0X4014AB);
	op_stkvar	(x,	1);
	set_cmt	(0X4014AF,	"ptr",	0);
	create_insn	(x=0X4014B7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4014BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X4014C3);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4014CF);
	create_insn	(x=0X4014D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X4014E9);
	op_hex		(x,	1);
	create_insn	(0X4014F0);
	create_insn	(x=0X4014F4);
	op_hex		(x,	1);
	create_insn	(x=0X4014F8);
	op_stkvar	(x,	0);
	create_insn	(x=0X4014FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401501);
	op_stkvar	(x,	1);
	create_insn	(x=0X401508);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401512);
	op_stkvar	(x,	1);
	make_array	(0X401521,	0XF);
	create_insn	(0X401530);
	create_insn	(x=0X40153B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401543);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401554);
	op_hex		(x,	1);
	create_insn	(x=0X401558);
	op_hex		(x,	1);
	create_insn	(x=0X401586);
	op_hex		(x,	1);
	make_array	(0X401595,	0XB);
	create_insn	(0X4015A0);
	set_name	(0X4015A0,	"nullsub_1");
	make_array	(0X4015A2,	0X2);
	create_insn	(x=0X4015A4);
	op_hex		(x,	1);
	create_insn	(x=0X4015A8);
	op_hex		(x,	1);
	make_array	(0X4015AD,	0X3);
	create_qword	(0X4015B0);
	create_byte	(0X4015B8);
	make_array	(0X4015B8,	0X2);
	create_strlit	(0X4015BA,	0X6);
	set_name	(0X4015BA,	"aS");
	create_strlit	(0X4015C0,	0X9);
	set_name	(0X4015C0,	"a131m");
	create_strlit	(0X4015CA,	0X6);
	set_name	(0X4015CA,	"aS_0");
	create_strlit	(0X4015DB,	0X11);
	set_name	(0X4015DB,	"aNotFoundWhy");
	create_strlit	(0X4015EC,	0X19);
	set_name	(0X4015EC,	"aYourPassword32");
	create_strlit	(0X401605,	0X5);
	set_name	(0X401605,	"a0m");
	create_strlit	(0X40160A,	0X10);
	set_name	(0X40160A,	"aYourKeyIsS");
	make_array	(0X40161A,	0X6);
	create_strlit	(0X401620,	0X43);
	set_name	(0X401620,	"aWelcomeToUbunt");
	create_strlit	(0X401663,	0X19);
	set_name	(0X401663,	"aWelcomeToUbunt_0");
	make_array	(0X40167C,	0X4);
	create_strlit	(0X401680,	0X58);
	set_name	(0X401680,	"aPleaseWriteYou");
	create_strlit	(0X4016D8,	0XD);
	set_name	(0X4016D8,	"aDataPtrP");
	create_strlit	(0X4016E5,	0X7);
	set_name	(0X4016E5,	"aData");
	create_strlit	(0X4016EC,	0XD);
	set_name	(0X4016EC,	"aInvokePtr");
	create_strlit	(0X4016F9,	0X7);
	set_name	(0X4016F9,	"aArg0");
	create_strlit	(0X401700,	0X7);
	set_name	(0X401700,	"aArg1");
	create_strlit	(0X401707,	0X7);
	set_name	(0X401707,	"aArg2");
	create_strlit	(0X40170E,	0XF);
	set_name	(0X40170E,	"aRetIs0xLlx");
	make_array	(0X40171D,	0X3);
	create_strlit	(0X401720,	0X39);
	set_name	(0X401720,	"aYourMachineCod");
	create_strlit	(0X401759,	0X1A);
	set_name	(0X401759,	"aInteractiveMod");
	create_strlit	(0X401773,	0X1C);
	set_name	(0X401773,	"aButDoYouLikeFl");
	create_strlit	(0X40178F,	0X14);
	set_name	(0X40178F,	"aFirstBloodToYo");
	create_strlit	(0X4017A3,	0X9);
	set_name	(0X4017A3,	"aFlagTxt");
	make_array	(0X4017AC,	0X4);
	create_strlit	(0X4017B0,	0X23);
	set_name	(0X4017B0,	"aDisableSystemC");
	make_array	(0X4017D3,	0X5);
	create_strlit	(0X4017D8,	0X32);
	set_name	(0X4017D8,	"aSafeServer");
	make_array	(0X40180A,	0X6);
	create_strlit	(0X401810,	0X33);
	set_name	(0X401810,	"aServerend");
	create_strlit	(0X401843,	0X1D);
	set_name	(0X401843,	"a1");
	create_strlit	(0X401860,	0X16);
	set_name	(0X401860,	"a133mtryAgain0m");
	make_array	(0X401876,	0X2);
	create_strlit	(0X401878,	0X50);
	set_name	(0X401878,	"aYouNeedToGetTh");
	create_strlit	(0X4018C8,	0X1E);
	set_name	(0X4018C8,	"a131mconnection");
	create_strlit	(0X4018E6,	0X5);
	set_name	(0X4018E6,	"aGood");
	make_array	(0X4018EB,	0X5);
	set_cmt	(0X4018F0,	"offset to this\noffset to this",	0);
	create_qword	(x=0X4018F0);
	op_dec		(x,	0);
	set_name	(0X4018F0,	"_ZTV11Safe_Server");
	create_qword	(x=0X4018F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X401900);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X401908);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401910,	"offset to this\noffset to this",	0);
	create_qword	(x=0X401910);
	op_dec		(x,	0);
	set_name	(0X401910,	"_ZTV12RemoteServer");
	create_qword	(x=0X401918);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X401920);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X401928);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401930,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X401930,	E_PREV + 0,	"; public \x01\b\x01(0000000000401930Safe_Server\x02\b :");
	update_extra_cmt		(0X401930,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000000000401958RemoteServer\x02\b :");
	update_extra_cmt		(0X401930,	E_PREV + 2,	";     protected /* offset 0x8 */ \x01\b\x01(0000000000401990Login\x02\b");
	update_extra_cmt		(0X401930,	E_PREV + 3,	"; public \x01\b\x01(0000000000401930Safe_Server\x02\b :");
	update_extra_cmt		(0X401930,	E_PREV + 4,	";   public /* offset 0x0 */ \x01\b\x01(0000000000401958RemoteServer\x02\b :");
	update_extra_cmt		(0X401930,	E_PREV + 5,	";     protected /* offset 0x8 */ \x01\b\x01(0000000000401990Login\x02\b");
	create_qword	(x=0X401930);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X401930,	"_ZTI11Safe_Server");
	set_cmt	(0X401938,	"reference to type's name\nreference to type's name",	0);
	create_qword	(x=0X401938);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401940,	"reference to parent's type name\nreference to parent's type name",	0);
	create_qword	(x=0X401940);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401948,	"type descriptor name\ntype descriptor name",	1);
	create_strlit	(0X401948,	0XE);
	set_name	(0X401948,	"_ZTS11Safe_Server");
	make_array	(0X401956,	0X2);
	set_cmt	(0X401958,	"reference to RTTI's type class\nreference to RTTI's type class",	0);
	update_extra_cmt		(0X401958,	E_PREV + 0,	"; public \x01\b\x01(0000000000401958RemoteServer\x02\b :");
	update_extra_cmt		(0X401958,	E_PREV + 1,	";   protected /* offset 0x8 */ \x01\b\x01(0000000000401990Login\x02\b");
	update_extra_cmt		(0X401958,	E_PREV + 2,	"; public \x01\b\x01(0000000000401958RemoteServer\x02\b :");
	update_extra_cmt		(0X401958,	E_PREV + 3,	";   protected /* offset 0x8 */ \x01\b\x01(0000000000401990Login\x02\b");
	create_qword	(x=0X401958);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X401958,	"_ZTI12RemoteServer");
	set_cmt	(0X401960,	"reference to type's name\nreference to type's name",	0);
	create_qword	(x=0X401960);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401968,	"attribute\nattribute",	0);
	create_dword	(x=0X401968);
	op_hex		(x,	0);
	set_cmt	(0X40196C,	"count of base classes\ncount of base classes",	0);
	create_dword	(x=0X40196C);
	op_dec		(x,	0);
	set_cmt	(0X401970,	"base class' type descriptor\nbase class' type descriptor",	0);
	create_qword	(x=0X401970);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401978,	"base class' attributes\nbase class' attributes",	0);
	create_qword	(x=0X401978);
	op_hex		(x,	0);
	set_cmt	(0X401980,	"type descriptor name\ntype descriptor name",	1);
	create_strlit	(0X401980,	0XF);
	set_name	(0X401980,	"_ZTS12RemoteServer");
	set_cmt	(0X401990,	"reference to RTTI's type class\nreference to RTTI's type class",	0);
	update_extra_cmt		(0X401990,	E_PREV + 0,	"; public \x01\b\x01(0000000000401990Login\x02\b");
	update_extra_cmt		(0X401990,	E_PREV + 1,	"; public \x01\b\x01(0000000000401990Login\x02\b");
	create_qword	(x=0X401990);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X401990,	"_ZTI5Login");
	set_cmt	(0X401998,	"reference to type's name\nreference to type's name",	0);
	create_qword	(x=0X401998);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4019A0,	"type descriptor name\ntype descriptor name",	1);
	create_strlit	(0X4019A0,	0X7);
	set_name	(0X4019A0,	"_ZTS5Login");
	create_qword	(0X4019A8);
	make_array	(0X4019A8,	0X22);
	create_qword	(0X401AB8);
	make_array	(0X401AB8,	0X75);
	create_qword	(0X401E60);
	make_array	(0X401E60,	0X5);
	set_cmt	(0X602E08,	"DT_NULL ",	0);
	MakeStruct	(0X602E08,	"Elf64_Dyn");
	create_qword	(0X602FF8);
	create_qword	(0X603008);
	create_qword	(0X603010);
	create_qword	(0X603018);
	create_qword	(0X603020);
	create_qword	(0X603028);
	create_qword	(0X603030);
	create_qword	(0X603038);
	create_qword	(0X603040);
	create_qword	(0X603048);
	create_qword	(0X603050);
	create_qword	(0X603058);
	create_qword	(0X603060);
	create_qword	(0X603068);
	create_qword	(0X603070);
	create_qword	(0X603078);
	create_qword	(0X603080);
	create_qword	(0X603088);
	make_array	(0X603090,	0X10);
	create_qword	(0X603100);
	set_name	(0X603100,	"stdin");
	create_qword	(0X6031C0);
	set_name	(0X6031C0,	"stderr");
	create_qword	(0X6031C8);
	set_name	(0X6031C8,	"stdout");
	create_byte	(0X6031D0);
	make_array	(0X6031D1,	0X7);
}

static Functions_0(void) {

	add_func    (0X4009C8,0X4009E2);
	set_func_flags(0X4009C8,0x4400);
	set_frame_size(0X4009C8, 0X8, 0, 0);
	add_func    (0X400A00,0X400A06);
	set_func_flags(0X400A00,0x480);
	SetType(0X400A00, "__int64 __fastcall printf(__int64 a1, __int64 a2);");
	add_func    (0X400A10,0X400A16);
	set_func_flags(0X400A10,0x480);
	SetType(0X400A10, "__int64 __fastcall puts(char *a1);");
	add_func    (0X400A20,0X400A26);
	set_func_flags(0X400A20,0x480);
	add_func    (0X400A30,0X400A36);
	set_func_flags(0X400A30,0x480);
	add_func    (0X400A40,0X400A46);
	set_func_flags(0X400A40,0x480);
	add_func    (0X400A50,0X400A56);
	set_func_flags(0X400A50,0x480);
	add_func    (0X400A60,0X400A66);
	set_func_flags(0X400A60,0x480);
	add_func    (0X400A70,0X400A76);
	set_func_flags(0X400A70,0x480);
	add_func    (0X400A80,0X400A86);
	set_func_flags(0X400A80,0x480);
	add_func    (0X400A90,0X400A96);
	set_func_flags(0X400A90,0x480);
	SetType(0X400A90, "__int64 __fastcall getchar();");
	add_func    (0X400AA0,0X400AA6);
	set_func_flags(0X400AA0,0x480);
	add_func    (0X400AB0,0X400AB6);
	set_func_flags(0X400AB0,0x480);
	add_func    (0X400AC0,0X400AC6);
	set_func_flags(0X400AC0,0x480);
	add_func    (0X400AE0,0X400AE6);
	set_func_flags(0X400AE0,0x480);
	add_func    (0X400AF0,0X400AF6);
	set_func_flags(0X400AF0,0x480);
	add_func    (0X400B00,0X400B2A);
	set_func_flags(0X400B00,0x401);
	add_func    (0X400B30,0X400B62);
	set_func_flags(0X400B30,0x4410);
	set_frame_size(0X400B30, 0, 8, 0);
	add_func    (0X400C26,0X400C82);
	set_func_flags(0X400C26,0x4410);
	set_frame_size(0X400C26, 0X80, 8, 0);
	add_func    (0X400C82,0X400D35);
	set_func_flags(0X400C82,0x4410);
	SetType(0X400C82, "__int64 __fastcall to_hex(char *my_key, char *my_key2, int Immediate_64);");
	set_frame_size(0X400C82, 0X30, 8, 0);
	define_local_var(0X400C82, 0X400D35, "[bp-0X24]", "length");
	define_local_var(0X400C82, 0X400D35, "[bp-0X8]", "ou");
	define_local_var(0X400C82, 0X400D35, "[bp-0X5]", "ji");
	add_func    (0X400D35,0X400DDE);
	set_func_flags(0X400D35,0x4410);
	set_frame_size(0X400D35, 0X90, 8, 0);
	define_local_var(0X400D35, 0X400DDE, "[bp-0X88]", "a2");
	define_local_var(0X400D35, 0X400DDE, "[bp-0X78]", "stream");
	define_local_var(0X400D35, 0X400DDE, "[bp-0X70]", "buf");
	add_func    (0X400DDE,0X400E48);
	set_func_flags(0X400DDE,0x4410);
	SetType(0X400DDE, "signed __int64 __fastcall sub_400DDE(__int64 ptr_, __int64 *cpuid_1, __int64 a3, __int64 a4, __int64 a5);");
	set_frame_size(0X400DDE, 0X20, 8, 0);
	define_local_var(0X400DDE, 0X400E48, "[bp-0X18]", "ptr");
	add_func    (0X400E48,0X400FD9);
	set_func_flags(0X400E48,0x4410);
	set_frame_size(0X400E48, 0X150, 8, 0);
	define_local_var(0X400E48, 0X400FD9, "[bp-0X140]", "ptr");
	add_func    (0X400FD9,0X401029);
	set_func_flags(0X400FD9,0x4410);
	set_frame_size(0X400FD9, 0X1C, 8, 0);
	add_func    (0X40102A,0X401120);
	set_func_flags(0X40102A,0x4410);
	SetType(0X40102A, "sandbox *__fastcall get_input_to_hex(sandbox *ptr, __int64 ptr_3, __int64 a3, __int64 a4, __int64 a5);");
	set_frame_size(0X40102A, 0X20, 8, 0);
	define_local_var(0X40102A, 0X401120, "[bp-0X18]", "a3");
	define_local_var(0X40102A, 0X401120, "[bp-0X2]", "asci");
	define_local_var(0X40102A, 0X401120, "[bp-0X1]", "count");
	add_func    (0X401120,0X40113D);
	set_func_flags(0X401120,0x4410);
	SetType(0X401120, "sandbox *__fastcall vtable_plus(sandbox *ptr);");
	set_frame_size(0X401120, 0X8, 8, 0);
	add_func    (0X40113E,0X40119F);
	set_func_flags(0X40113E,0x4410);
	SetType(0X40113E, "unsigned __int64 __fastcall sub_40113E(__int64 ptr_1);");
	set_frame_size(0X40113E, 0X20, 8, 0);
	add_func    (0X4011A0,0X4011AE);
	set_func_flags(0X4011A0,0x4410);
	set_frame_size(0X4011A0, 0X8, 8, 0);
	add_func    (0X4011AE,0X4011C7);
	set_func_flags(0X4011AE,0x4410);
	set_frame_size(0X4011AE, 0X10, 8, 0);
	add_func    (0X4011C8,0X401302);
	set_func_flags(0X4011C8,0x4410);
	set_frame_size(0X4011C8, 0X550, 8, 0);
	define_local_var(0X4011C8, 0X401302, "[bp-0X510]", "a2");
	add_func    (0X401302,0X401314);
	set_func_flags(0X401302,0x4410);
	set_frame_size(0X401302, 0X8, 8, 0);
	add_func    (0X401314,0X401326);
	set_func_flags(0X401314,0x4410);
	set_frame_size(0X401314, 0X8, 8, 0);
	add_func    (0X401326,0X4013E4);
	set_func_flags(0X401326,0x4410);
	SetType(0X401326, "__int64 __usercall sub_401326@<rax>(sandbox *ptr@<rdi>, __int64 a2@<rdx>, __int64 a3@<rcx>);");
	set_frame_size(0X401326, 0X40, 8, 0);
	define_local_var(0X401326, 0X4013E4, "[bp-0X20]", "key_c");
	define_local_var(0X401326, 0X4013E4, "[bp-0X18]", "key_d");
	add_func    (0X4013E4,0X4013FB);
	set_func_flags(0X4013E4,0x4410);
	set_frame_size(0X4013E4, 0X8, 8, 0);
	add_func    (0X4013FC,0X401427);
	set_func_flags(0X4013FC,0x4410);
	SetType(0X4013FC, "_QWORD *__fastcall sub_4013FC(sandbox *ptr);");
	set_frame_size(0X4013FC, 0X10, 8, 0);
	add_func    (0X401428,0X401478);
	set_func_flags(0X401428,0x4410);
	set_frame_size(0X401428, 0X20, 8, 0);
	add_func    (0X401478,0X40149D);
	set_func_flags(0X401478,0x4410);
	set_frame_size(0X401478, 0X10, 8, 0);
	add_func    (0X40149E,0X4014F0);
	set_func_flags(0X40149E,0x4410);
	SetType(0X40149E, "__int64 __fastcall sub_40149E(sandbox *ptr);");
	set_frame_size(0X40149E, 0X20, 8, 0);
	define_local_var(0X40149E, 0X4014F0, "[bp-0X18]", "ptr");
	add_func    (0X4014F0,0X401521);
	set_func_flags(0X4014F0,0x4410);
	set_frame_size(0X4014F0, 0X10, 8, 0);
	add_func    (0X4015A0,0X4015A2);
	set_func_flags(0X4015A0,0x4440);
	set_frame_size(0X4015A0, 0, 0, 0);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0X400000,"es",0,3);
	split_sreg_range(0X602DF0,"es",0,3);
	split_sreg_range(0X400000,"ss",0,3);
	split_sreg_range(0X602DF0,"ss",0,3);
	split_sreg_range(0X400000,"ds",0X6,3);
	split_sreg_range(0X602DF0,"ds",0X6,3);
	split_sreg_range(0X400000,"fs",0,3);
	split_sreg_range(0X602DF0,"fs",0,3);
	split_sreg_range(0X400000,"gs",0,3);
	split_sreg_range(0X602DF0,"gs",0,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
        end_type_updating(UTP_STRUCT);
}

// End of file.
